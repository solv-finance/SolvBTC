{
  "address": "0x742918b33461cf744979F16646A67B9313333F61",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sftWrappedToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redemptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cancelAmount",
          "type": "uint256"
        }
      ],
      "name": "CancelRedemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sftWrappedToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redemptionId",
          "type": "uint256"
        }
      ],
      "name": "CreateRedemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sftWrappedToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swtTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currencyAmount",
          "type": "uint256"
        }
      ],
      "name": "CreateSubscription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGovernor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "NewGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingGovernor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingGovernor",
          "type": "address"
        }
      ],
      "name": "NewPendingGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sftWrappedToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sftSlot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sftWrappedToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "unstaker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sftSlot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "openFundRedemptionId_",
          "type": "uint256"
        }
      ],
      "name": "cancelRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId_",
          "type": "bytes32"
        }
      ],
      "name": "checkPoolPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount_",
          "type": "uint256"
        }
      ],
      "name": "createRedemption",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redemptionId_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "currencyAmount_",
          "type": "uint256"
        }
      ],
      "name": "createSubscription",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shareValue_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "holdingSftIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governor_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "openFundMarket_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sftWrappedTokenFactory_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromSftId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toSftId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC3525Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sftId_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openFundMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sftWrappedTokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sftAddress_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sftId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingAdmin_",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingGovernor_",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swtAddress_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sftId_",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toSftId_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c8a8660edbab30ce3908b03d18dd25cc7c131db702262941f9166aa461986ac",
  "receipt": {
    "to": null,
    "from": "0x4b2e4cAc67786778c79beCcC8c800E325Ab3bDDa",
    "contractAddress": "0x742918b33461cf744979F16646A67B9313333F61",
    "transactionIndex": 1,
    "gasUsed": "3271125",
    "logsBloom": "0x
    "blockHash": "0xaa6e5db5f476aa9aad116110b067be63b1dd96d931aa3ffaf7beb0c2ad2f9e77",
    "transactionHash": "0x3c8a8660edbab30ce3908b03d18dd25cc7c131db702262941f9166aa461986ac",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 12656551,
        "transactionHash": "0x3c8a8660edbab30ce3908b03d18dd25cc7c131db702262941f9166aa461986ac",
        "address": "0x742918b33461cf744979F16646A67B9313333F61",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xaa6e5db5f476aa9aad116110b067be63b1dd96d931aa3ffaf7beb0c2ad2f9e77"
      }
    ],
    "blockNumber": 12656551,
    "cumulativeGasUsed": "3315000",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5ed0d029ae82ff2a50ee427c5e3bcb56",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sftWrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelAmount\",\"type\":\"uint256\"}],\"name\":\"CancelRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sftWrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionId\",\"type\":\"uint256\"}],\"name\":\"CreateRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sftWrappedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swtTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"CreateSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"NewGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingGovernor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingGovernor\",\"type\":\"address\"}],\"name\":\"NewPendingGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sftWrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sftSlot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sftWrappedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unstaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sftSlot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"openFundRedemptionId_\",\"type\":\"uint256\"}],\"name\":\"cancelRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId_\",\"type\":\"bytes32\"}],\"name\":\"checkPoolPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount_\",\"type\":\"uint256\"}],\"name\":\"createRedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redemptionId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currencyAmount_\",\"type\":\"uint256\"}],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shareValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holdingSftIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openFundMarket_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sftWrappedTokenFactory_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSftId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toSftId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC3525Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sftId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openFundMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sftWrappedTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sftId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin_\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingGovernor_\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swtAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sftId_\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toSftId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SftWrapRouter.sol\":\"SftWrapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] so that it can be accessed externally.\\n *\\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\\n * the beacon to not upgrade the implementation maliciously.\\n *\\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\\n * an inconsistent state where the beacon storage slot does not match the beacon address.\\n */\\ncontract BeaconProxy is Proxy {\\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\\n    address private immutable _beacon;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\\n        _beacon = beacon;\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Returns the beacon.\\n     */\\n    function _getBeacon() internal view virtual returns (address) {\\n        return _beacon;\\n    }\\n}\\n\",\"keccak256\":\"0x387ebdcb365b8e620f26645d2b34a161cd39eedfb0219e8baff55630c5ae113c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\nimport {Ownable} from \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev The `implementation` of the beacon is invalid.\\n     */\\n    error BeaconInvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\\n     */\\n    constructor(address implementation_, address initialOwner) Ownable(initialOwner) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert BeaconInvalidImplementation(newImplementation);\\n        }\\n        _implementation = newImplementation;\\n        emit Upgraded(newImplementation);\\n    }\\n}\\n\",\"keccak256\":\"0x5920bac7215d12961e23b207f6e81a1d64aa4935a4469abe95b64a96a3c3007b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/ISftWrapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./external/IERC721Receiver.sol\\\";\\nimport \\\"./external/IERC3525Receiver.sol\\\";\\n\\ninterface ISftWrapRouter is IERC721Receiver, IERC3525Receiver, IERC165 {\\n}\",\"keccak256\":\"0x817274c7ea02d3be73c56efd9c1dc73a0ebcd335eb9490c385b07fd1905cbcdb\",\"license\":\"MIT\"},\"contracts/ISftWrappedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./external/IERC721Receiver.sol\\\";\\nimport \\\"./external/IERC3525Receiver.sol\\\";\\n\\ninterface ISftWrappedToken is IERC20, IERC721Receiver, IERC3525Receiver, IERC165 {\\n\\tfunction mint(uint256 sftId_, uint256 amount_) external;\\n    function burn(uint256 amount_, uint256 sftId_) external returns (uint256 toSftId_);\\n    function getValueByShares(uint256 shares) external view returns (uint256 value);\\n    function getSharesByValue(uint256 value) external view returns (uint256 shares);\\n    function underlyingAsset() external view returns (address underlyingAsset);\\n}\",\"keccak256\":\"0x0265aab29f5bc60b8a1658b20d873bb258c21d204bcbddd8e75c5c929713de89\",\"license\":\"MIT\"},\"contracts/SftWrapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./access/AdminControlUpgradeable.sol\\\";\\nimport \\\"./access/GovernorControlUpgradeable.sol\\\";\\nimport \\\"./utils/ERC20TransferHelper.sol\\\";\\nimport \\\"./utils/ERC3525TransferHelper.sol\\\";\\nimport \\\"./external/IERC3525.sol\\\";\\nimport \\\"./external/IOpenFundMarket.sol\\\";\\nimport \\\"./SftWrappedTokenFactory.sol\\\";\\nimport \\\"./SftWrappedToken.sol\\\";\\nimport \\\"./ISftWrapRouter.sol\\\";\\n\\ncontract SftWrapRouter is\\n    ISftWrapRouter,\\n    ReentrancyGuardUpgradeable,\\n    AdminControlUpgradeable,\\n    GovernorControlUpgradeable\\n{\\n    event CreateSubscription(\\n        bytes32 indexed poolId,\\n        address indexed subscriber,\\n        address sftWrappedToken,\\n        uint256 swtTokenAmount,\\n        address currency,\\n        uint256 currencyAmount\\n    );\\n    event CreateRedemption(\\n        bytes32 indexed poolId,\\n        address indexed redeemer,\\n        address indexed sftWrappedToken,\\n        uint256 redeemAmount,\\n        uint256 redemptionId\\n    );\\n    event CancelRedemption(\\n        bytes32 indexed poolId,\\n        address indexed owner,\\n        address indexed sftWrappedToken,\\n        uint256 redemptionId,\\n        uint256 cancelAmount\\n    );\\n    event Stake(\\n        address indexed sftWrappedToken,\\n        address indexed staker,\\n        address sft,\\n        uint256 sftSlot,\\n        uint256 sftId,\\n        uint256 amount\\n    );\\n    event Unstake(\\n        address indexed sftWrappedToken,\\n        address indexed unstaker,\\n        address sft,\\n        uint256 sftSlot,\\n        uint256 sftId,\\n        uint256 amount\\n    );\\n\\n    address public openFundMarket;\\n    address public sftWrappedTokenFactory;\\n\\n    // sft address => sft slot => holding sft id\\n    mapping(address => mapping(uint256 => uint256)) public holdingSftIds;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address governor_, address openFundMarket_, address sftWrappedTokenFactory_)\\n        external\\n        initializer\\n    {\\n        require(governor_ != address(0), \\\"SftWrapRouter: invalid governor\\\");\\n        require(openFundMarket_ != address(0), \\\"SftWrapRouter: invalid openFundMarket\\\");\\n        require(sftWrappedTokenFactory_ != address(0), \\\"SftWrapRouter: invalid sftWrappedTokenFactory\\\");\\n\\n        AdminControlUpgradeable.__AdminControl_init(msg.sender);\\n        GovernorControlUpgradeable.__GovernorControl_init(governor_);\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        openFundMarket = openFundMarket_;\\n        sftWrappedTokenFactory = sftWrappedTokenFactory_;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return \\n            interfaceId == type(IERC3525Receiver).interfaceId || \\n            interfaceId == type(IERC721Receiver).interfaceId || \\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    function onERC3525Received(\\n        address, /* operator_ */\\n        uint256 fromSftId_,\\n        uint256 toSftId_,\\n        uint256 value_,\\n        bytes calldata /* data_ */\\n    ) external virtual override returns (bytes4) {\\n        IERC3525 openFundShare = IERC3525(msg.sender);\\n        uint256 openFundShareSlot = openFundShare.slotOf(toSftId_);\\n        address sftWrappedToken = SftWrappedTokenFactory(sftWrappedTokenFactory).sftWrappedTokens(\\n            msg.sender, openFundShareSlot\\n        );\\n        require(sftWrappedToken != address(0), \\\"SftWrapRouter: sft wrapped token not created\\\");\\n        require(value_ > 0, \\\"SftWrapRouter: stake amount cannot be 0\\\");\\n\\n        address fromSftIdOwner = openFundShare.ownerOf(fromSftId_);\\n        if (fromSftIdOwner == openFundMarket || fromSftIdOwner == sftWrappedToken) {\\n            return IERC3525Receiver.onERC3525Received.selector;\\n        }\\n\\n        address toSftIdOwner = openFundShare.ownerOf(toSftId_);\\n        require(toSftIdOwner == address(this), \\\"SftWrapRouter: not owned sft id\\\");\\n\\n        if (holdingSftIds[address(openFundShare)][openFundShareSlot] == 0) {\\n            holdingSftIds[address(openFundShare)][openFundShareSlot] = toSftId_;\\n        } else {\\n            require(\\n                toSftId_ == holdingSftIds[address(openFundShare)][openFundShareSlot],\\n                \\\"SftWrapRouter: not holding sft id\\\"\\n            );\\n        }\\n\\n        {\\n            uint256 swtHoldingValueSftId = SftWrappedToken(sftWrappedToken).holdingValueSftId();\\n            if (swtHoldingValueSftId == 0) {\\n                ERC3525TransferHelper.doTransferOut(address(openFundShare), toSftId_, sftWrappedToken, value_);\\n            } else {\\n                ERC3525TransferHelper.doTransfer(address(openFundShare), toSftId_, swtHoldingValueSftId, value_);\\n            }\\n        }\\n\\n        ERC20TransferHelper.doTransferOut(sftWrappedToken, payable(fromSftIdOwner), value_);\\n        emit Stake(sftWrappedToken, fromSftIdOwner, address(openFundShare), openFundShareSlot, fromSftId_, value_);\\n        return IERC3525Receiver.onERC3525Received.selector;\\n    }\\n\\n    function onERC721Received(address, /* operator_ */ address from_, uint256 sftId_, bytes calldata /* data_ */ )\\n        external\\n        virtual\\n        override\\n        returns (bytes4)\\n    {\\n        IERC3525 openFundShare = IERC3525(msg.sender);\\n        uint256 openFundShareSlot = openFundShare.slotOf(sftId_);\\n        address sftWrappedToken = SftWrappedTokenFactory(sftWrappedTokenFactory).sftWrappedTokens(\\n            msg.sender, openFundShareSlot\\n        );\\n        require(sftWrappedToken != address(0), \\\"SftWrapRouter: sft wrapped token not created\\\");\\n\\n        if (from_ == openFundMarket || from_ == sftWrappedToken) {\\n            return IERC721Receiver.onERC721Received.selector;\\n        }\\n\\n        require(openFundShare.balanceOf(sftId_) > 0, \\\"SftWrapRouter: stake amount cannot be 0\\\");\\n\\n        address sftIdOwner = openFundShare.ownerOf(sftId_);\\n        require(sftIdOwner == address(this), \\\"SftWrapRouter: not owned sft id\\\");\\n\\n        uint256 openFundShareValue = openFundShare.balanceOf(sftId_);\\n        ERC3525TransferHelper.doSafeTransferOut(address(openFundShare), sftWrappedToken, sftId_);\\n        ERC20TransferHelper.doTransferOut(sftWrappedToken, payable(from_), openFundShareValue);\\n\\n        emit Stake(sftWrappedToken, from_, address(openFundShare), openFundShareSlot, sftId_, openFundShareValue);\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function stake(address sftAddress_, uint256 sftId_, uint256 amount_) external virtual nonReentrant {\\n        IERC3525 sft = IERC3525(sftAddress_);\\n        uint256 slot = sft.slotOf(sftId_);\\n        address sftWrappedToken = SftWrappedTokenFactory(sftWrappedTokenFactory).sftWrappedTokens(sftAddress_, slot);\\n        require(sftWrappedToken != address(0), \\\"SftWrapRouter: sft wrapped token not created\\\");\\n\\n        require(msg.sender == sft.ownerOf(sftId_), \\\"SftWrapRouter: caller is not sft owner\\\");\\n        require(amount_ > 0, \\\"SftWrapRouter: stake amount cannot be 0\\\");\\n\\n        uint256 sftBalance = sft.balanceOf(sftId_);\\n        if (amount_ == sftBalance) {\\n            ERC3525TransferHelper.doSafeTransferIn(sftAddress_, msg.sender, sftId_);\\n        } else if (amount_ < sftBalance) {\\n            uint256 holdingSftId = holdingSftIds[sftAddress_][slot];\\n            if (holdingSftId == 0) {\\n                ERC3525TransferHelper.doTransferIn(sftAddress_, sftId_, amount_);\\n            } else {\\n                ERC3525TransferHelper.doTransfer(sftAddress_, sftId_, holdingSftId, amount_);\\n            }\\n        } else {\\n            revert(\\\"SftWrapRouter: stake amount exceeds sft balance\\\");\\n        }\\n    }\\n\\n    function unstake(address swtAddress_, uint256 amount_, uint256 sftId_)\\n        external\\n        virtual\\n        nonReentrant\\n        returns (uint256 toSftId_)\\n    {\\n        require(swtAddress_ != address(0), \\\"SftWrapRouter: invalid swt address\\\");\\n        SftWrappedToken swt = SftWrappedToken(swtAddress_);\\n        address sftAddress = swt.wrappedSftAddress();\\n        uint256 slot = swt.wrappedSftSlot();\\n        require(\\n            swtAddress_ == SftWrappedTokenFactory(sftWrappedTokenFactory).sftWrappedTokens(sftAddress, slot),\\n            \\\"SftWrapRouter: invalid swt address\\\"\\n        );\\n\\n        require(amount_ > 0, \\\"SftWrapRouter: unstake amount cannot be 0\\\");\\n        ERC20TransferHelper.doTransferIn(swtAddress_, msg.sender, amount_);\\n\\n        if (holdingSftIds[sftAddress][slot] == 0) {\\n            holdingSftIds[sftAddress][slot] = swt.burn(amount_, 0);\\n        } else {\\n            swt.burn(amount_, holdingSftIds[sftAddress][slot]);\\n        }\\n\\n        if (sftId_ == 0) {\\n            toSftId_ =\\n                ERC3525TransferHelper.doTransferOut(sftAddress, holdingSftIds[sftAddress][slot], msg.sender, amount_);\\n        } else {\\n            require(slot == IERC3525(sftAddress).slotOf(sftId_), \\\"SftWrapRouter: slot does not match\\\");\\n            require(msg.sender == IERC3525(sftAddress).ownerOf(sftId_), \\\"SftWrapRouter: not sft owner\\\");\\n            ERC3525TransferHelper.doTransfer(sftAddress, holdingSftIds[sftAddress][slot], sftId_, amount_);\\n            toSftId_ = sftId_;\\n        }\\n\\n        emit Unstake(swtAddress_, msg.sender, sftAddress, slot, toSftId_, amount_);\\n    }\\n\\n    function createSubscription(bytes32 poolId_, uint256 currencyAmount_)\\n        external\\n        virtual\\n        nonReentrant\\n        returns (uint256 shareValue_)\\n    {\\n        require(checkPoolPermission(poolId_), \\\"SftWrapRouter: pool permission denied\\\");\\n        PoolInfo memory poolInfo = IOpenFundMarket(openFundMarket).poolInfos(poolId_);\\n        IERC3525 openFundShare = IERC3525(poolInfo.poolSFTInfo.openFundShare);\\n        uint256 openFundShareSlot = poolInfo.poolSFTInfo.openFundShareSlot;\\n        ERC20TransferHelper.doTransferIn(poolInfo.currency, msg.sender, currencyAmount_);\\n\\n        ERC20TransferHelper.doApprove(poolInfo.currency, openFundMarket, currencyAmount_);\\n        shareValue_ =\\n            IOpenFundMarket(openFundMarket).subscribe(poolId_, currencyAmount_, 0, uint64(block.timestamp + 300));\\n\\n        uint256 shareCount = openFundShare.balanceOf(address(this));\\n        uint256 shareId = openFundShare.tokenOfOwnerByIndex(address(this), shareCount - 1);\\n        require(openFundShare.slotOf(shareId) == openFundShareSlot, \\\"SftWrapRouter: incorrect share slot\\\");\\n        require(openFundShare.balanceOf(shareId) == shareValue_, \\\"SftWrapRouter: incorrect share value\\\");\\n\\n        address sftWrappedToken =\\n            SftWrappedTokenFactory(sftWrappedTokenFactory).sftWrappedTokens(address(openFundShare), openFundShareSlot);\\n        require(sftWrappedToken != address(0), \\\"SftWrapRouter: sft wrapped token not created\\\");\\n\\n        ERC3525TransferHelper.doSafeTransferOut(address(openFundShare), sftWrappedToken, shareId);\\n        ERC20TransferHelper.doTransferOut(sftWrappedToken, payable(msg.sender), shareValue_);\\n\\n        emit CreateSubscription(poolId_, msg.sender, sftWrappedToken, shareValue_, poolInfo.currency, currencyAmount_);\\n    }\\n\\n    function createRedemption(bytes32 poolId_, uint256 redeemAmount_)\\n        external\\n        virtual\\n        nonReentrant\\n        returns (uint256 redemptionId_)\\n    {\\n        PoolInfo memory poolInfo = IOpenFundMarket(openFundMarket).poolInfos(poolId_);\\n        IERC3525 openFundShare = IERC3525(poolInfo.poolSFTInfo.openFundShare);\\n        IERC3525 openFundRedemption = IERC3525(poolInfo.poolSFTInfo.openFundRedemption);\\n        uint256 openFundShareSlot = poolInfo.poolSFTInfo.openFundShareSlot;\\n\\n        address sftWrappedToken =\\n            SftWrappedTokenFactory(sftWrappedTokenFactory).sftWrappedTokens(address(openFundShare), openFundShareSlot);\\n        require(sftWrappedToken != address(0), \\\"SftWrapRouter: sft wrapped token not created\\\");\\n        ERC20TransferHelper.doTransferIn(sftWrappedToken, msg.sender, redeemAmount_);\\n\\n        uint256 shareId = ISftWrappedToken(sftWrappedToken).burn(redeemAmount_, 0);\\n        ERC3525TransferHelper.doApproveId(address(openFundShare), openFundMarket, shareId);\\n        IOpenFundMarket(openFundMarket).requestRedeem(poolId_, shareId, 0, redeemAmount_);\\n\\n        uint256 redemptionBalance = openFundRedemption.balanceOf(address(this));\\n        redemptionId_ = openFundRedemption.tokenOfOwnerByIndex(address(this), redemptionBalance - 1);\\n        require(\\n            openFundRedemption.balanceOf(redemptionId_) == redeemAmount_, \\\"SftWrapRouter: incorrect redemption value\\\"\\n        );\\n        ERC3525TransferHelper.doTransferOut(address(openFundRedemption), payable(msg.sender), redemptionId_);\\n\\n        emit CreateRedemption(poolId_, msg.sender, sftWrappedToken, redeemAmount_, redemptionId_);\\n    }\\n\\n    function cancelRedemption(bytes32 poolId_, uint256 openFundRedemptionId_) external virtual nonReentrant {\\n        PoolInfo memory poolInfo = IOpenFundMarket(openFundMarket).poolInfos(poolId_);\\n        IERC3525 openFundShare = IERC3525(poolInfo.poolSFTInfo.openFundShare);\\n        IERC3525 openFundRedemption = IERC3525(poolInfo.poolSFTInfo.openFundRedemption);\\n        uint256 openFundShareSlot = poolInfo.poolSFTInfo.openFundShareSlot;\\n\\n        ERC3525TransferHelper.doTransferIn(address(openFundRedemption), msg.sender, openFundRedemptionId_);\\n        ERC3525TransferHelper.doApproveId(address(openFundRedemption), openFundMarket, openFundRedemptionId_);\\n        IOpenFundMarket(openFundMarket).revokeRedeem(poolId_, openFundRedemptionId_);\\n        uint256 shareBalance = openFundShare.balanceOf(address(this));\\n        uint256 shareId = openFundShare.tokenOfOwnerByIndex(address(this), shareBalance - 1);\\n        uint256 shareValue = openFundShare.balanceOf(shareId);\\n\\n        address sftWrappedToken =\\n            SftWrappedTokenFactory(sftWrappedTokenFactory).sftWrappedTokens(address(openFundShare), openFundShareSlot);\\n        require(sftWrappedToken != address(0), \\\"SftWrapRouter: sft wrapped token not created\\\");\\n\\n        ERC3525TransferHelper.doSafeTransferOut(address(openFundShare), sftWrappedToken, shareId);\\n        ERC20TransferHelper.doTransferOut(sftWrappedToken, payable(msg.sender), shareValue);\\n\\n        emit CancelRedemption(poolId_, msg.sender, sftWrappedToken, openFundRedemptionId_, shareValue);\\n    }\\n\\n    function checkPoolPermission(bytes32 poolId_) public view virtual returns (bool) {\\n        PoolInfo memory poolInfo = IOpenFundMarket(openFundMarket).poolInfos(poolId_);\\n        if (poolInfo.permissionless) {\\n            return true;\\n        }\\n        address whiteListManager = IOpenFundMarket(openFundMarket).getAddress(\\\"OFMWhitelistStrategyManager\\\");\\n        return IOFMWhitelistStrategyManager(whiteListManager).isWhitelisted(poolId_, msg.sender);\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x1dd02294bf46871491a14a87d508c1f7ab2da84f4a0fdf77c23586c728e5788f\",\"license\":\"MIT\"},\"contracts/SftWrappedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"./utils/ERC3525TransferHelper.sol\\\";\\nimport \\\"./external/IERC3525.sol\\\";\\nimport \\\"./ISftWrappedToken.sol\\\";\\n\\nstruct SlotBaseInfo {\\n    address issuer;\\n    address currency;\\n    uint64 valueDate;\\n    uint64 maturity;\\n    uint64 createTime;\\n    bool transferable;\\n    bool isValid;\\n}\\n\\ninterface IOpenFundSftDelegate {\\n    function concrete() external view returns (address);\\n}\\n\\ninterface IOpenFundSftConcrete {\\n    function slotBaseInfo(uint256 slot) external view returns (SlotBaseInfo memory);\\n}\\n\\ninterface INavOracle {\\n    function getSubscribeNav(bytes32 poolId, uint256 time) external view returns (uint256 nav, uint256 navTime);\\n}\\n\\ncontract SftWrappedToken is ISftWrappedToken, ERC20Upgradeable, ReentrancyGuardUpgradeable {\\n    address public wrappedSftAddress;\\n    uint256 public wrappedSftSlot;\\n    address public navOracle;\\n    uint256 public holdingValueSftId;\\n\\n    uint256[] internal _holdingEmptySftIds;\\n\\n    modifier onlyWrappedSft() {\\n        require(msg.sender == wrappedSftAddress, \\\"SftWrappedToken: only wrapped sft\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address wrappedSftAddress_,\\n        uint256 wrappedSftSlot_,\\n        address navOracle_\\n    ) external virtual initializer {\\n        require(wrappedSftAddress_ != address(0), \\\"SftWrappedToken: invalid sft address\\\");\\n        require(wrappedSftSlot_ != 0, \\\"SftWrappedToken: invalid sft slot\\\");\\n        require(navOracle_ != address(0), \\\"SftWrappedToken: invalid nav oracle address\\\");\\n\\n        ERC20Upgradeable.__ERC20_init(name_, symbol_);\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        wrappedSftAddress = wrappedSftAddress_;\\n        wrappedSftSlot = wrappedSftSlot_;\\n        navOracle = navOracle_;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC3525Receiver).interfaceId || interfaceId == type(IERC721Receiver).interfaceId\\n            || interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return IERC3525(wrappedSftAddress).valueDecimals();\\n    }\\n\\n    function onERC3525Received(\\n        address, /* operator_ */\\n        uint256 fromSftId_,\\n        uint256 sftId_,\\n        uint256 value_,\\n        bytes calldata /* data_ */\\n    ) external virtual override onlyWrappedSft returns (bytes4) {\\n        address fromSftOwner = IERC3525(wrappedSftAddress).ownerOf(fromSftId_);\\n\\n        if (fromSftOwner == address(this)) {\\n            return IERC3525Receiver.onERC3525Received.selector;\\n        }\\n\\n        require(value_ > 0, \\\"SftWrappedToken: mint zero not allowed\\\");\\n        if (holdingValueSftId == 0) {\\n            require(wrappedSftSlot == IERC3525(wrappedSftAddress).slotOf(sftId_), \\\"SftWrappedToken: unreceivable slot\\\");\\n            require(address(this) == IERC3525(wrappedSftAddress).ownerOf(sftId_), \\\"SftWrappedToken: not owned sft id\\\");\\n            holdingValueSftId = sftId_;\\n        } else {\\n            require(holdingValueSftId == sftId_, \\\"SftWrappedToken: not holding value sft id\\\");\\n        }\\n\\n        _mint(fromSftOwner, value_);\\n\\n        return IERC3525Receiver.onERC3525Received.selector;\\n    }\\n\\n    function onERC721Received(address, /* operator_ */ address from_, uint256 sftId_, bytes calldata /* data_ */ )\\n        external\\n        virtual\\n        override\\n        onlyWrappedSft\\n        returns (bytes4)\\n    {\\n        require(wrappedSftSlot == IERC3525(wrappedSftAddress).slotOf(sftId_), \\\"SftWrappedToken: unreceivable slot\\\");\\n        require(address(this) == IERC3525(wrappedSftAddress).ownerOf(sftId_), \\\"SftWrappedToken: not owned sft id\\\");\\n\\n        if (from_ == address(this)) {\\n            return IERC721Receiver.onERC721Received.selector;\\n        }\\n\\n        uint256 sftValue = IERC3525(wrappedSftAddress).balanceOf(sftId_);\\n        require(sftValue > 0, \\\"SftWrappedToken: mint zero not allowed\\\");\\n\\n        if (holdingValueSftId == 0) {\\n            holdingValueSftId = sftId_;\\n        } else {\\n            ERC3525TransferHelper.doTransfer(wrappedSftAddress, sftId_, holdingValueSftId, sftValue);\\n            _holdingEmptySftIds.push(sftId_);\\n        }\\n        _mint(from_, sftValue);\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function mint(uint256 sftId_, uint256 amount_) external virtual override nonReentrant {\\n        require(wrappedSftSlot == IERC3525(wrappedSftAddress).slotOf(sftId_), \\\"SftWrappedToken: slot does not match\\\");\\n        require(msg.sender == IERC3525(wrappedSftAddress).ownerOf(sftId_), \\\"SftWrappedToken: caller is not sft owner\\\");\\n        require(amount_ > 0, \\\"SftWrappedToken: mint amount cannot be 0\\\");\\n\\n        uint256 sftBalance = IERC3525(wrappedSftAddress).balanceOf(sftId_);\\n        if (amount_ == sftBalance) {\\n            ERC3525TransferHelper.doSafeTransferIn(wrappedSftAddress, msg.sender, sftId_);\\n        } else if (amount_ < sftBalance) {\\n            if (holdingValueSftId == 0) {\\n                holdingValueSftId = ERC3525TransferHelper.doTransferIn(wrappedSftAddress, sftId_, amount_);\\n            } else {\\n                ERC3525TransferHelper.doTransfer(wrappedSftAddress, sftId_, holdingValueSftId, amount_);\\n            }\\n        } else {\\n            revert(\\\"SftWrappedToken: mint amount exceeds sft balance\\\");\\n        }\\n    }\\n\\n    function burn(uint256 amount_, uint256 sftId_) external virtual override nonReentrant returns (uint256 toSftId_) {\\n        require(amount_ > 0, \\\"SftWrappedToken: burn amount cannot be 0\\\");\\n        _burn(msg.sender, amount_);\\n\\n        if (sftId_ == 0) {\\n            if (_holdingEmptySftIds.length == 0) {\\n                toSftId_ =\\n                    ERC3525TransferHelper.doTransferOut(wrappedSftAddress, holdingValueSftId, msg.sender, amount_);\\n            } else {\\n                toSftId_ = _holdingEmptySftIds[_holdingEmptySftIds.length - 1];\\n                _holdingEmptySftIds.pop();\\n                ERC3525TransferHelper.doTransfer(wrappedSftAddress, holdingValueSftId, toSftId_, amount_);\\n                ERC3525TransferHelper.doTransferOut(wrappedSftAddress, msg.sender, toSftId_);\\n            }\\n        } else {\\n            require(\\n                wrappedSftSlot == IERC3525(wrappedSftAddress).slotOf(sftId_), \\\"SftWrappedToken: slot does not match\\\"\\n            );\\n            require(msg.sender == IERC3525(wrappedSftAddress).ownerOf(sftId_), \\\"SftWrappedToken: not sft owner\\\");\\n            ERC3525TransferHelper.doTransfer(wrappedSftAddress, holdingValueSftId, sftId_, amount_);\\n            toSftId_ = sftId_;\\n        }\\n    }\\n\\n    function layer1Minter() public pure virtual returns (address) {\\n        return 0xDA39c7A3A5EDa1604C34862eE4cd93806347348e;\\n    }\\n\\n    function layer1Mint(uint256 amount_) external virtual nonReentrant {\\n        require(msg.sender == layer1Minter(), \\\"only layer1 minter\\\");\\n        _mint(layer1MintTarget(), amount_);\\n    }\\n\\n    function layer1MintTarget() public pure virtual returns (address) {\\n        return 0x9470c613622ceC23c55ea7c44f74adfb920b1cdc;\\n    }\\n\\n    function layer1Burn(uint256 amount_) external virtual nonReentrant {\\n        require(msg.sender == layer1Minter(), \\\"only layer1 minter\\\");\\n        _burn(layer1MintTarget(), amount_);\\n    }\\n\\n    /**\\n     * @notice Get amount of underlying asset for a given amount of shares.\\n     */\\n    function getValueByShares(uint256 shares) external view virtual override returns (uint256 value) {\\n        bytes32 poolId = keccak256(abi.encode(wrappedSftAddress, wrappedSftSlot));\\n        (uint256 latestNav,) = INavOracle(navOracle).getSubscribeNav(poolId, block.timestamp);\\n        return shares * latestNav / (10 ** decimals());\\n    }\\n\\n    /**\\n     * @notice Get amount of shares for a given amount of underlying asset.\\n     */\\n    function getSharesByValue(uint256 value) external view virtual override returns (uint256 shares) {\\n        bytes32 poolId = keccak256(abi.encode(wrappedSftAddress, wrappedSftSlot));\\n        (uint256 latestNav,) = INavOracle(navOracle).getSubscribeNav(poolId, block.timestamp);\\n        return latestNav == 0 ? 0 : (value * (10 ** decimals()) / latestNav);\\n    }\\n\\n    // underlying asset address\\n    function underlyingAsset() external view virtual override returns (address) {\\n        address sftConcreteAddress = IOpenFundSftDelegate(wrappedSftAddress).concrete();\\n        SlotBaseInfo memory slotBaseInfo = IOpenFundSftConcrete(sftConcreteAddress).slotBaseInfo(wrappedSftSlot);\\n        return slotBaseInfo.currency;\\n    }\\n}\\n\",\"keccak256\":\"0xaaec30c59a0914f1bda6779afea81167144b5e78eaf1c079377612d8ad594eab\",\"license\":\"MIT\"},\"contracts/SftWrappedTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport \\\"./access/AdminControl.sol\\\";\\nimport \\\"./access/GovernorControl.sol\\\";\\n\\ncontract SftWrappedTokenFactory is AdminControl, GovernorControl {\\n\\n    event NewImplementation(string indexed productType, address indexed implementation);\\n    event NewBeacon(string indexed productType, address indexed beacon, address indexed implementation);\\n    event UpgradeBeacon(string indexed productType, address indexed beacon, address indexed implementation);\\n    event TransferBeaconOwnership(string indexed productType, address indexed beacon, address indexed newOwner);\\n    event NewBeaconProxy(string indexed productType, string indexed productName, address indexed beaconProxy);\\n    event RemoveBeaconProxy(string indexed productType, string indexed productName, address indexed beaconProxy);\\n    event SftWrappedTokenCreated(\\n        address indexed wrappedSft, uint256 indexed wrappedSftSlot, address indexed sftWrappedToken, \\n        string name, string symbol, address navOracle\\n    );\\n    \\n    struct ProductType {\\n        address implementation;\\n        address beacon;\\n        mapping(string => address) proxies;\\n    }\\n\\n    struct SftWrappedTokenInfo {\\n        string name;\\n        string symbol;\\n        address wrappedSft;\\n        uint256 wrappedSftSlot;\\n        address navOracle;\\n    }\\n\\n    mapping(string => ProductType) public productTypes;\\n\\n    // sftWrappedToken address\\n    mapping(address => SftWrappedTokenInfo) public sftWrappedTokenInfos;\\n\\n    // sft address => sft slot => sftWrappedToken address\\n    mapping(address => mapping(uint256 => address)) public sftWrappedTokens;\\n\\n    constructor(address governor_) AdminControl(msg.sender) GovernorControl(governor_) {\\n        require(governor_ != address(0), \\\"SftWrappedTokenFactory: invalid governor\\\");\\n    }\\n    \\n    function setImplementation(string memory productType_, address implementation_) external virtual onlyAdmin {\\n        require(implementation_ != address(0), \\\"SftWrappedTokenFactory: invalid implementation\\\");\\n        productTypes[productType_].implementation = implementation_;\\n        emit NewImplementation(productType_, implementation_);\\n    }\\n\\n    function deployBeacon(string memory productType_) external virtual onlyAdmin returns (address beacon) {\\n        address implementation = productTypes[productType_].implementation;\\n        require(implementation != address(0), \\\"SftWrappedTokenFactory: implementation not deployed\\\");\\n        require(productTypes[productType_].beacon == address(0), \\\"SftWrappedTokenFactory: beacon already deployed\\\");\\n\\n        beacon = address(new UpgradeableBeacon(implementation, address(this)));\\n        productTypes[productType_].beacon = beacon;\\n        emit NewBeacon(productType_, beacon, implementation);\\n    }\\n\\n    function upgradeBeacon(string memory productType_) external virtual onlyAdmin {\\n        address latestImplementation = productTypes[productType_].implementation;\\n        address beacon = productTypes[productType_].beacon;\\n        \\n        require(latestImplementation != address(0), \\\"SftWrappedTokenFactory: implementation not deployed\\\");\\n        require(UpgradeableBeacon(beacon).implementation() != latestImplementation, \\\"SftWrappedTokenFactory: same implementation\\\");\\n        UpgradeableBeacon(beacon).upgradeTo(latestImplementation);\\n        emit UpgradeBeacon(productType_, beacon, latestImplementation);\\n    }\\n\\n    function transferBeaconOwnership(string memory productType_, address newOwner_) external virtual onlyAdmin {\\n        address beacon = productTypes[productType_].beacon;\\n        UpgradeableBeacon(beacon).transferOwnership(newOwner_);\\n        emit TransferBeaconOwnership(productType_, beacon, newOwner_);\\n    }\\n\\n    function deployProductProxy(\\n        string memory productType_, string memory productName_,\\n        string memory tokenName_, string memory tokenSymbol_, \\n        address wrappedSft_, uint256 wrappedSftSlot_, \\n        address navOracle_\\n    ) external virtual onlyGovernor returns (address proxy_) {\\n        require(wrappedSft_ != address(0), \\\"SftWrappedTokenFactory: invalid wrapped sft address\\\");\\n        require(navOracle_ != address(0), \\\"SftWrappedTokenFactory: invalid nav oracle address\\\");\\n        require(sftWrappedTokens[wrappedSft_][wrappedSftSlot_] == address(0), \\\"SftWrappedTokenFactory: SftWrappedToken already deployed\\\");\\n\\n        ProductType storage productType = productTypes[productType_];\\n        require(productType.proxies[productName_] == address(0), \\\"SftWrappedTokenFactory: product already deployed\\\");\\n        require(productType.beacon != address(0), \\\"SftWrappedTokenFactory: beacon not deployed\\\");\\n\\n        proxy_ = address(new BeaconProxy(productType.beacon, new bytes(0)));\\n        bytes memory initData = abi.encodeWithSignature(\\n            \\\"initialize(string,string,address,uint256,address)\\\",\\n            tokenName_, tokenSymbol_, wrappedSft_, wrappedSftSlot_, navOracle_\\n        );\\n        (bool success, ) = proxy_.call(initData);\\n        require(success, \\\"SftWrappedTokenFactory: initialization failed\\\");\\n\\n        productType.proxies[productName_] = proxy_;\\n        emit NewBeaconProxy(productType_, productName_, proxy_);\\n\\n        sftWrappedTokenInfos[proxy_] = SftWrappedTokenInfo({\\n            name: tokenName_, symbol: tokenSymbol_, wrappedSft: wrappedSft_,\\n            wrappedSftSlot: wrappedSftSlot_, navOracle: navOracle_\\n        });\\n        sftWrappedTokens[wrappedSft_][wrappedSftSlot_] = proxy_;\\n\\n        emit SftWrappedTokenCreated(wrappedSft_, wrappedSftSlot_, proxy_, tokenName_, tokenSymbol_, navOracle_);\\n    }\\n\\n    function removeProductProxy(string memory productType_, string memory productName_) external onlyGovernor {\\n        address proxy = productTypes[productType_].proxies[productName_];\\n        require(proxy != address(0), \\\"SftWrappedTokenFactory: proxy not deployed\\\");\\n        delete productTypes[productType_].proxies[productName_];\\n        emit RemoveBeaconProxy(productType_, productName_, proxy);\\n    }\\n\\n    function getImplementation(string memory productType_) external view virtual returns (address) {\\n        return productTypes[productType_].implementation;\\n    }\\n\\n    function getBeacon(string memory productType_) external view virtual returns (address) {\\n        return productTypes[productType_].beacon;\\n    }\\n\\n    function getProxy(string memory productType_, string memory productName_) public view returns (address) {\\n        return productTypes[productType_].proxies[productName_];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x80698e616d7462b568a6b09a215ba323fc57b10ffe4091b941ce829a1a93b3d0\",\"license\":\"MIT\"},\"contracts/access/AdminControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nabstract contract AdminControl {\\n\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingAdmin() {\\n        require(msg.sender == pendingAdmin, \\\"only pending admin\\\");\\n        _;\\n    }\\n\\n    constructor(address admin_) {\\n        admin = admin_;\\n        emit NewAdmin(address(0), admin_);\\n    }\\n\\n    function transferAdmin(address newPendingAdmin_) external virtual onlyAdmin {\\n        emit NewPendingAdmin(pendingAdmin, newPendingAdmin_);\\n        pendingAdmin = newPendingAdmin_;        \\n    }\\n\\n    function acceptAdmin() external virtual onlyPendingAdmin {\\n        emit NewAdmin(admin, pendingAdmin);\\n        admin = pendingAdmin;\\n        delete pendingAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf1f81923342923ae02ac26cc26e5d3cc4ee5b749055e89266b64b8f647baa018\",\"license\":\"MIT\"},\"contracts/access/AdminControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract AdminControlUpgradeable is Initializable {\\n\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingAdmin() {\\n        require(msg.sender == pendingAdmin, \\\"only pending admin\\\");\\n        _;\\n    }\\n\\n    function __AdminControl_init(address admin_) internal onlyInitializing {\\n        __AdminControl_init_unchained(admin_);\\n    }\\n\\n    function __AdminControl_init_unchained(address admin_) internal onlyInitializing {\\n        admin = admin_;\\n        emit NewAdmin(address(0), admin_);\\n    }\\n\\n    function transferAdmin(address newPendingAdmin_) external virtual onlyAdmin {\\n        emit NewPendingAdmin(pendingAdmin, newPendingAdmin_);\\n        pendingAdmin = newPendingAdmin_;        \\n    }\\n\\n    function acceptAdmin() external virtual onlyPendingAdmin {\\n        emit NewAdmin(admin, pendingAdmin);\\n        admin = pendingAdmin;\\n        delete pendingAdmin;\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bde55289afe561d40407007b005a6cdc97d7cc3ec98e58866faeb80f63f883\",\"license\":\"MIT\"},\"contracts/access/GovernorControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nabstract contract GovernorControl {\\n\\n\\tevent NewGovernor(address oldGovernor, address newGovernor);\\n\\tevent NewPendingGovernor(address oldPendingGovernor, address newPendingGovernor);\\n\\n\\taddress public governor;\\n\\taddress public pendingGovernor;\\n\\n\\tmodifier onlyGovernor() {\\n\\t\\trequire(governor == msg.sender, \\\"only governor\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyPendingGovernor() {\\n\\t\\trequire(pendingGovernor == msg.sender, \\\"only governor\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address governor_) {\\n\\t\\tgovernor = governor_;\\n        emit NewGovernor(address(0), governor_);\\n\\t}\\n\\n\\tfunction transferGovernance(address newPendingGovernor_) external virtual onlyGovernor {\\n\\t\\temit NewPendingGovernor(pendingGovernor, newPendingGovernor_);\\n\\t\\tpendingGovernor = newPendingGovernor_;\\n\\t}\\n\\n\\tfunction acceptGovernance() external virtual onlyPendingGovernor {\\n\\t\\temit NewGovernor(governor, pendingGovernor);\\n\\t\\tgovernor = pendingGovernor;\\n\\t\\tdelete pendingGovernor;\\n\\t}\\n}\\n\",\"keccak256\":\"0x3a6b5959055dc2700d6368c2de16d7143c87e146d4ddd6eb55adc528f82d60a3\",\"license\":\"MIT\"},\"contracts/access/GovernorControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract GovernorControlUpgradeable is Initializable {\\n\\n\\tevent NewGovernor(address oldGovernor, address newGovernor);\\n\\tevent NewPendingGovernor(address oldPendingGovernor, address newPendingGovernor);\\n\\n\\taddress public governor;\\n\\taddress public pendingGovernor;\\n\\n\\tmodifier onlyGovernor() {\\n\\t\\trequire(governor == msg.sender, \\\"only governor\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyPendingGovernor() {\\n\\t\\trequire(pendingGovernor == msg.sender, \\\"only governor\\\");\\n\\t\\t_;\\n\\t}\\n\\n    function __GovernorControl_init(address governor_) internal onlyInitializing {\\n        __GovernorControl_init_unchained(governor_);\\n    }\\n\\n    function __GovernorControl_init_unchained(address governor_) internal onlyInitializing {\\n        governor = governor_;\\n        emit NewGovernor(address(0), governor_);\\n    }\\n\\n\\tfunction transferGovernance(address newPendingGovernor_) external virtual onlyGovernor {\\n\\t\\temit NewPendingGovernor(pendingGovernor, newPendingGovernor_);\\n\\t\\tpendingGovernor = newPendingGovernor_;\\n\\t}\\n\\n\\tfunction acceptGovernance() external virtual onlyPendingGovernor {\\n\\t\\temit NewGovernor(governor, pendingGovernor);\\n\\t\\tgovernor = pendingGovernor;\\n\\t\\tdelete pendingGovernor;\\n\\t}\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xb5ac2d7ee4cf554341129668f843eba7f389e793b0b56318261b9deffb4dcf0a\",\"license\":\"MIT\"},\"contracts/external/IERC3525.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IERC3525 is IERC721 {\\n    function valueDecimals() external view returns (uint8);\\n    function balanceOf(uint256 tokenId) external view returns (uint256);\\n    function slotOf(uint256 tokenId) external view returns (uint256);\\n    function allowance(uint256 tokenId, address operator) external view returns (uint256);\\n    \\n    function approve(address operator, uint256 tokenId) external payable;\\n    function approve(uint256 tokenId, address operator, uint256 value) external payable;\\n    function transferFrom(uint256 fromTokenId, uint256 toTokenId, uint256 value) external payable;\\n    function transferFrom(uint256 fromTokenId, address to, uint256 value) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a41cdc0d8776a3dacd22983247a662b8a982efa4a7e5c57466de2274fa3d4a7\",\"license\":\"MIT\"},\"contracts/external/IERC3525Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC3525Receiver {\\n    function onERC3525Received(address operator, uint256 fromTokenId, uint256 toTokenId, uint256 value, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x931b362b85b9bc3a3a6fbff54d2f631e3e7f021130717a31947f017ec42b1b08\",\"license\":\"MIT\"},\"contracts/external/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC721 {\\n    function balanceOf(address owner) external view returns (uint256);\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n    function getApproved(uint256 tokenId) external view returns (address);\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function approve(address approved, uint256 tokenId) external payable;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external payable;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x6bfe227558726b5692c09a72a1ad0068fa4fc28bac6cc176937d1e10eaf880c4\",\"license\":\"MIT\"},\"contracts/external/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x1e859773aaf8f8759146ea718f5a7c290b7b0fe9163137738586e1e9c1785923\",\"license\":\"MIT\"},\"contracts/external/IOpenFundMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nstruct SubscribeLimitInfo {\\n    uint256 hardCap;\\n    uint256 subscribeMin;\\n    uint256 subscribeMax;\\n    uint64 fundraisingStartTime;\\n    uint64 fundraisingEndTime;\\n}\\n\\nstruct PoolSFTInfo {\\n    address openFundShare;\\n    address openFundRedemption;\\n    uint256 openFundShareSlot;\\n    uint256 latestRedeemSlot;\\n}\\n\\nstruct PoolFeeInfo {\\n    uint16 carryRate;\\n    address carryCollector;\\n    uint64 latestProtocolFeeSettleTime;\\n}\\n\\nstruct ManagerInfo {\\n    address poolManager;\\n    address subscribeNavManager;\\n    address redeemNavManager;\\n}\\n\\nstruct PoolInfo {\\n    PoolSFTInfo poolSFTInfo;\\n    PoolFeeInfo poolFeeInfo;\\n    ManagerInfo managerInfo;\\n    SubscribeLimitInfo subscribeLimitInfo;\\n    address vault;\\n    address currency;\\n    address navOracle;\\n    uint64 valueDate;\\n    bool permissionless;\\n    uint256 fundraisingAmount;\\n}\\n\\ninterface IOpenFundMarket {\\n    function subscribe(bytes32 poolId, uint256 currencyAmount, uint256 openFundShareId, uint64 expireTime)\\n        external\\n        returns (uint256 value_);\\n    function requestRedeem(bytes32 poolId, uint256 openFundShareId, uint256 openFundRedemptionId, uint256 redeemValue)\\n        external;\\n    function revokeRedeem(bytes32 poolId, uint256 openFundRedemptionId) external;\\n\\n    function poolInfos(bytes32 poolId) external view returns (PoolInfo memory);\\n    function getAddress(bytes32 name) external view returns (address);\\n    function purchasedRecords(bytes32 poolId, address buyer) external view returns (uint256);\\n}\\n\\ninterface IOFMWhitelistStrategyManager {\\n    function isWhitelisted(bytes32 poolId_, address buyer_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x086d692b85541803d243e9b8ab6aecb91821274054bf536bc360b355bacc94ac\",\"license\":\"MIT\"},\"contracts/utils/ERC20TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface ERC20Interface {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary ERC20TransferHelper {\\n\\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    function doApprove(address underlying, address spender, uint256 amount) internal {\\n        require(underlying.code.length > 0, \\\"invalid underlying\\\");\\n        (bool success, bytes memory data) = underlying.call(\\n            abi.encodeWithSelector(\\n                ERC20Interface.approve.selector,\\n                spender,\\n                amount\\n            )\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SAF\\\");\\n    }\\n\\n    function doTransferIn(address underlying, address from, uint256 amount) internal {\\n        if (underlying == ETH_ADDRESS) {\\n            // Sanity checks\\n            require(tx.origin == from || msg.sender == from, \\\"sender mismatch\\\");\\n            require(msg.value >= amount, \\\"value mismatch\\\");\\n        } else {\\n            require(underlying.code.length > 0, \\\"invalid underlying\\\");\\n            (bool success, bytes memory data) = underlying.call(\\n                abi.encodeWithSelector(\\n                    ERC20Interface.transferFrom.selector,\\n                    from,\\n                    address(this),\\n                    amount\\n                )\\n            );\\n            require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"STF\\\");\\n        }\\n    }\\n\\n    function doTransferOut(address underlying, address payable to, uint256 amount) internal {\\n        if (underlying == ETH_ADDRESS) {\\n            (bool success, ) = to.call{value: amount}(new bytes(0));\\n            require(success, \\\"STE\\\");\\n        } else {\\n            require(underlying.code.length > 0, \\\"invalid underlying\\\");\\n            (bool success, bytes memory data) = underlying.call(\\n                abi.encodeWithSelector(\\n                    ERC20Interface.transfer.selector,\\n                    to,\\n                    amount\\n                )\\n            );\\n            require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad355871805100dae61fd0a58d926df8ee37db00237d339afde5269e79319fe2\",\"license\":\"MIT\"},\"contracts/utils/ERC3525TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface ERC721Interface {\\n    function approve(address to, uint256 tokenId) external;\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\\ninterface ERC3525Interface {\\n    function approve(uint256 tokenId, address to, uint256 allowance) external payable;\\n    function transferFrom(uint256 fromTokenId, uint256 toTokenId, uint256 value) external payable;\\n    function transferFrom(uint256 fromTokenId, address to, uint256 value) external payable returns (uint256); \\n}\\n\\nlibrary ERC3525TransferHelper {\\n    function doApproveId(address underlying, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.approve(to, tokenId);\\n    }\\n\\n    function doApproveValue(address underlying, uint256 tokenId, address to, uint256 allowance) internal {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        token.approve(tokenId, to, allowance);\\n    }\\n\\n    function doTransferIn(address underlying, address from, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.transferFrom(from, address(this), tokenId);\\n    }\\n    \\n    function doSafeTransferIn(address underlying, address from, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.safeTransferFrom(from, address(this), tokenId);\\n    }\\n\\n    function doSafeTransferOut(address underlying, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.safeTransferFrom(address(this), to, tokenId);\\n    }\\n\\n    function doTransferOut(address underlying, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.transferFrom(address(this), to, tokenId);\\n    }\\n\\n    function doTransferIn(address underlying, uint256 fromTokenId, uint256 value) internal returns (uint256 newTokenId) {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        return token.transferFrom(fromTokenId, address(this), value);\\n    }\\n\\n    function doTransferOut(address underlying, uint256 fromTokenId, address to, uint256 value) internal returns (uint256 newTokenId) {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        newTokenId = token.transferFrom(fromTokenId, to, value);\\n    }\\n\\n    function doTransfer(address underlying, address from, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.transferFrom(from, to, tokenId);\\n    }\\n\\n    function doTransfer(address underlying, uint256 fromTokenId, uint256 toTokenId, uint256 value) internal {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        token.transferFrom(fromTokenId, toTokenId, value);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7ba67e1347eb1a423a055a27a53488eff24b3b59a6ba84a7e8d0cf36b7c05ec1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101065760003560e01c80629ce20b1461010b57806301ffc9a71461013c5780630c340a241461015f5780630c51b88f1461017f5780630e18b68114610194578063150b7a021461019c5780631d98e7f8146101af578063238efcbc146101c257806326782247146101ca5780632c7eb4c8146101dd57806334d27fbf146101f05780634fe03069146102115780636d724ead1461022457806375829def14610237578063a2bc66be1461024a578063c0c53b8b1461025d578063d38bfff414610270578063d6207d4614610283578063e3056a34146102ae578063f355d417146102c1578063f851a440146102d4575b600080fd5b61011e610119366004613111565b6102e7565b6040516001600160e01b031990911681526020015b60405180910390f35b61014f61014a366004613183565b610723565b6040519015158152602001610133565b603254610172906001600160a01b031681565b60405161013391906131ad565b61019261018d3660046131c1565b610774565b005b610192610ad0565b61011e6101aa3660046131f6565b610b7f565b61014f6101bd366004613268565b610ec7565b610192611054565b600154610172906001600160a01b031681565b606554610172906001600160a01b031681565b6102036101fe366004613281565b6110de565b604051908152602001610133565b61019261021f366004613281565b611534565b610203610232366004613281565b6118b9565b6101926102453660046132a3565b611e00565b6102036102583660046131c1565b611eb0565b61019261026b3660046132c0565b612478565b61019261027e3660046132a3565b6126da565b61020361029136600461330b565b606660209081526000928352604080842090915290825290205481565b603354610172906001600160a01b031681565b606454610172906001600160a01b031681565b600054610172906001600160a01b031681565b60405163131f9f3f60e11b81526004810185905260009033908290829063263f3e7e90602401602060405180830381865afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190613337565b6065546040516337547a9760e01b81529192506000916001600160a01b03909116906337547a97906103869033908690600401613350565b602060405180830381865afa1580156103a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c79190613379565b90506001600160a01b0381166103f85760405162461bcd60e51b81526004016103ef90613396565b60405180910390fd5b600087116104185760405162461bcd60e51b81526004016103ef906133e2565b6040516331a9108f60e11b8152600481018a90526000906001600160a01b03851690636352211e90602401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190613379565b6064549091506001600160a01b03808316911614806104b45750816001600160a01b0316816001600160a01b0316145b156104cc5750629ce20b60e01b935061071992505050565b6040516331a9108f60e11b8152600481018a90526000906001600160a01b03861690636352211e90602401602060405180830381865afa158015610514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105389190613379565b90506001600160a01b03811630146105625760405162461bcd60e51b81526004016103ef90613429565b6001600160a01b038516600090815260666020908152604080832087845290915281205490036105b7576001600160a01b038516600090815260666020908152604080832087845290915290208a9055610633565b6001600160a01b03851660009081526066602090815260408083208784529091529020548a146106335760405162461bcd60e51b815260206004820152602160248201527f53667457726170526f757465723a206e6f7420686f6c64696e672073667420696044820152601960fa1b60648201526084016103ef565b6000836001600160a01b03166344b32bd16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106979190613337565b9050806000036106b3576106ad868c868d61276d565b506106bf565b6106bf868c838d6127e5565b506106cb83838b612856565b816001600160a01b0316836001600160a01b031660008051602061391e83398151915287878f8e6040516107029493929190613460565b60405180910390a350629ce20b60e01b9450505050505b9695505050505050565b60006001600160e01b03198216629ce20b60e01b148061075357506001600160e01b03198216630a85bd0160e11b145b8061076e57506001600160e01b031982166301ffc9a760e01b145b92915050565b61077c612a58565b60405163131f9f3f60e11b81526004810183905283906000906001600160a01b0383169063263f3e7e90602401602060405180830381865afa1580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea9190613337565b6065546040516337547a9760e01b81529192506000916001600160a01b03909116906337547a97906108229089908690600401613350565b602060405180830381865afa15801561083f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108639190613379565b90506001600160a01b03811661088b5760405162461bcd60e51b81526004016103ef90613396565b6040516331a9108f60e11b8152600481018690526001600160a01b03841690636352211e90602401602060405180830381865afa1580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f49190613379565b6001600160a01b0316336001600160a01b0316146109635760405162461bcd60e51b815260206004820152602660248201527f53667457726170526f757465723a2063616c6c6572206973206e6f74207366746044820152651037bbb732b960d11b60648201526084016103ef565b600084116109835760405162461bcd60e51b81526004016103ef906133e2565b604051631398fee160e31b8152600481018690526000906001600160a01b03851690639cc7f70890602401602060405180830381865afa1580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef9190613337565b9050808503610a0857610a03873388612a8e565b610abf565b80851015610a5f576001600160a01b038716600090815260666020908152604080832086845290915281205490819003610a4d57610a47888888612aee565b50610a59565b610a59888883896127e5565b50610abf565b60405162461bcd60e51b815260206004820152602f60248201527f53667457726170526f757465723a207374616b6520616d6f756e74206578636560448201526e656473207366742062616c616e636560881b60648201526084016103ef565b50505050610acb612b66565b505050565b6001546001600160a01b03163314610b1f5760405162461bcd60e51b815260206004820152601260248201527137b7363c903832b73234b7339030b236b4b760711b60448201526064016103ef565b60005460015460405160008051602061395e83398151915292610b50926001600160a01b0391821692911690613486565b60405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60405163131f9f3f60e11b81526004810184905260009033908290829063263f3e7e90602401602060405180830381865afa158015610bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be69190613337565b6065546040516337547a9760e01b81529192506000916001600160a01b03909116906337547a9790610c1e9033908690600401613350565b602060405180830381865afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f9190613379565b90506001600160a01b038116610c875760405162461bcd60e51b81526004016103ef90613396565b6064546001600160a01b0389811691161480610cb45750806001600160a01b0316886001600160a01b0316145b15610ccc5750630a85bd0160e11b9250610ebe915050565b604051631398fee160e31b8152600481018890526000906001600160a01b03851690639cc7f70890602401602060405180830381865afa158015610d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d389190613337565b11610d555760405162461bcd60e51b81526004016103ef906133e2565b6040516331a9108f60e11b8152600481018890526000906001600160a01b03851690636352211e90602401602060405180830381865afa158015610d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc19190613379565b90506001600160a01b0381163014610deb5760405162461bcd60e51b81526004016103ef90613429565b604051631398fee160e31b8152600481018990526000906001600160a01b03861690639cc7f70890602401602060405180830381865afa158015610e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e579190613337565b9050610e6485848b612b77565b610e6f838b83612856565b896001600160a01b0316836001600160a01b031660008051602061391e83398151915287878d86604051610ea69493929190613460565b60405180910390a350630a85bd0160e11b9450505050505b95945050505050565b60645460405162daa6b160e61b81526004810183905260009182916001600160a01b03909116906336a9ac40906024016102a060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3991906136e4565b905080610100015115610f4f5750600192915050565b6064546040516321f8a72160e01b81527a27a326abb434ba32b634b9ba29ba3930ba32b3bca6b0b730b3b2b960291b60048201526000916001600160a01b0316906321f8a72190602401602060405180830381865afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190613379565b60405163f409981160e01b8152600481018690523360248201529091506001600160a01b0382169063f409981190604401602060405180830381865afa158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c91906137b1565b949350505050565b6033546001600160a01b0316331461107e5760405162461bcd60e51b81526004016103ef906137cc565b60325460335460405160008051602061393e833981519152926110af926001600160a01b0391821692911690613486565b60405180910390a160338054603280546001600160a01b03199081166001600160a01b03841617909155169055565b60006110e8612a58565b60645460405162daa6b160e61b8152600481018590526000916001600160a01b0316906336a9ac40906024016102a060405180830381865afa158015611132573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115691906136e4565b80518051602082015160409283015160655493516337547a9760e01b8152949550919390926000916001600160a01b03909116906337547a97906111a09087908690600401613350565b602060405180830381865afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190613379565b90506001600160a01b0381166112095760405162461bcd60e51b81526004016103ef90613396565b611214813389612ba9565b60405163b390c0ab60e01b81526000906001600160a01b0383169063b390c0ab90611245908b9085906004016137f3565b6020604051808303816000875af1158015611264573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112889190613337565b6064549091506112a39086906001600160a01b031683612d9c565b606480546040516371033ad760e01b8152600481018c905260248101849052600060448201529182018a90526001600160a01b0316906371033ad790608401600060405180830381600087803b1580156112fc57600080fd5b505af1158015611310573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03871691506370a08231906113439030906004016131ad565b602060405180830381865afa158015611360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113849190613337565b90506001600160a01b038516632f745c59306113a1600185613817565b6040518363ffffffff1660e01b81526004016113be929190613350565b602060405180830381865afa1580156113db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ff9190613337565b604051631398fee160e31b81526004810182905290985089906001600160a01b03871690639cc7f70890602401602060405180830381865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190613337565b146114cc5760405162461bcd60e51b815260206004820152602960248201527f53667457726170526f757465723a20696e636f727265637420726564656d7074604482015268696f6e2076616c756560b81b60648201526084016103ef565b6114d785338a612dcc565b826001600160a01b0316336001600160a01b03168b7f78f28b46ef784512c5644a2069be0c54b5504a85022f6944b8fe318e802881178c8c60405161151d9291906137f3565b60405180910390a45050505050505061076e612b66565b61153c612a58565b60645460405162daa6b160e61b8152600481018490526000916001600160a01b0316906336a9ac40906024016102a060405180830381865afa158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115aa91906136e4565b805180516020820151604090920151929350916115c8823387612dfe565b6064546115e09083906001600160a01b031687612d9c565b6064546040516302e9574960e51b81526001600160a01b0390911690635d2ae9209061161290899089906004016137f3565b600060405180830381600087803b15801561162c57600080fd5b505af1158015611640573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03861691506370a08231906116739030906004016131ad565b602060405180830381865afa158015611690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b49190613337565b905060006001600160a01b038516632f745c59306116d3600186613817565b6040518363ffffffff1660e01b81526004016116f0929190613350565b602060405180830381865afa15801561170d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117319190613337565b604051631398fee160e31b8152600481018290529091506000906001600160a01b03871690639cc7f70890602401602060405180830381865afa15801561177c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a09190613337565b6065546040516337547a9760e01b81529192506000916001600160a01b03909116906337547a97906117d8908a908990600401613350565b602060405180830381865afa1580156117f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118199190613379565b90506001600160a01b0381166118415760405162461bcd60e51b81526004016103ef90613396565b61184c878285612b77565b611857813384612856565b806001600160a01b0316336001600160a01b03168b7f31a995f8a7cba531318be8a1c061e5e8d9421639be592fc336c04a70222f97548c8660405161189d9291906137f3565b60405180910390a450505050505050506118b5612b66565b5050565b60006118c3612a58565b6118cc83610ec7565b6119265760405162461bcd60e51b815260206004820152602560248201527f53667457726170526f757465723a20706f6f6c207065726d697373696f6e2064604482015264195b9a595960da1b60648201526084016103ef565b60645460405162daa6b160e61b8152600481018590526000916001600160a01b0316906336a9ac40906024016102a060405180830381865afa158015611970573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199491906136e4565b8051805160409091015160a083015192935090916119b3903387612ba9565b60a08301516064546119cf91906001600160a01b031687612e30565b6064546001600160a01b0316638f3ecff0878760006119f04261012c61382a565b6040516001600160e01b031960e087901b1681526004810194909452602484019290925260448301526001600160401b031660648201526084016020604051808303816000875af1158015611a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6d9190613337565b93506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611a9d91906131ad565b602060405180830381865afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade9190613337565b905060006001600160a01b038416632f745c5930611afd600186613817565b6040518363ffffffff1660e01b8152600401611b1a929190613350565b602060405180830381865afa158015611b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5b9190613337565b60405163131f9f3f60e11b81526004810182905290915083906001600160a01b0386169063263f3e7e90602401602060405180830381865afa158015611ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc99190613337565b14611c225760405162461bcd60e51b815260206004820152602360248201527f53667457726170526f757465723a20696e636f727265637420736861726520736044820152621b1bdd60ea1b60648201526084016103ef565b604051631398fee160e31b81526004810182905286906001600160a01b03861690639cc7f70890602401602060405180830381865afa158015611c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8d9190613337565b14611ce65760405162461bcd60e51b8152602060048201526024808201527f53667457726170526f757465723a20696e636f72726563742073686172652076604482015263616c756560e01b60648201526084016103ef565b6065546040516337547a9760e01b81526000916001600160a01b0316906337547a9790611d199088908890600401613350565b602060405180830381865afa158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5a9190613379565b90506001600160a01b038116611d825760405162461bcd60e51b81526004016103ef90613396565b611d8d858284612b77565b611d98813389612856565b60a0860151604080516001600160a01b038481168252602082018b905290921682820152606082018a90525133918b917f4a29c2a0a0125871fb9cb0dcda775193070a8dd3a98e792b07eca515745de3bf9181900360800190a350505050505061076e612b66565b6000546001600160a01b03163314611e475760405162461bcd60e51b815260206004820152600a60248201526937b7363c9030b236b4b760b11b60448201526064016103ef565b6001546040517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a991611e86916001600160a01b03909116908490613486565b60405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000611eba612a58565b6001600160a01b038416611ee05760405162461bcd60e51b81526004016103ef9061383d565b60008490506000816001600160a01b031663baecd3266040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f499190613379565b90506000826001600160a01b0316634eb079816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf9190613337565b6065546040516337547a9760e01b81529192506001600160a01b0316906337547a9790611fe29085908590600401613350565b602060405180830381865afa158015611fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120239190613379565b6001600160a01b0316876001600160a01b0316146120535760405162461bcd60e51b81526004016103ef9061383d565b600086116120b55760405162461bcd60e51b815260206004820152602960248201527f53667457726170526f757465723a20756e7374616b6520616d6f756e7420636160448201526806e6e6f7420626520360bc1b60648201526084016103ef565b6120c0873388612ba9565b6001600160a01b038216600090815260666020908152604080832084845290915281205490036121855760405163b390c0ab60e01b81526001600160a01b0384169063b390c0ab906121199089906000906004016137f3565b6020604051808303816000875af1158015612138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215c9190613337565b6001600160a01b0383166000908152606660209081526040808320858452909152902055612216565b6001600160a01b0382811660009081526066602090815260408083208584529091529081902054905163b390c0ab60e01b81529185169163b390c0ab916121d1918a91906004016137f3565b6020604051808303816000875af11580156121f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122149190613337565b505b84600003612256576001600160a01b038216600090815260666020908152604080832084845290915290205461224f908390338961276d565b9350612415565b60405163131f9f3f60e11b8152600481018690526001600160a01b0383169063263f3e7e90602401602060405180830381865afa15801561229b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122bf9190613337565b81146123185760405162461bcd60e51b815260206004820152602260248201527f53667457726170526f757465723a20736c6f7420646f6573206e6f74206d61746044820152610c6d60f31b60648201526084016103ef565b6040516331a9108f60e11b8152600481018690526001600160a01b03831690636352211e90602401602060405180830381865afa15801561235d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123819190613379565b6001600160a01b0316336001600160a01b0316146123e05760405162461bcd60e51b815260206004820152601c60248201527b29b33a2bb930b82937baba32b91d103737ba1039b33a1037bbb732b960211b60448201526064016103ef565b6001600160a01b038216600090815260666020908152604080832084845290915290205461241190839087896127e5565b8493505b336001600160a01b0316876001600160a01b03167f2c904b13f3b9bc1fa77b4e439e2deb5507c11d7a25e042a5bf6374837582f0468484888b60405161245e9493929190613460565b60405180910390a3505050612471612b66565b9392505050565b6000612482612f5e565b805490915060ff600160401b82041615906001600160401b03166000811580156124a95750825b90506000826001600160401b031660011480156124c55750303b155b9050811580156124d3575080155b156124f15760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561251a57845460ff60401b1916600160401b1785555b6001600160a01b0388166125705760405162461bcd60e51b815260206004820152601f60248201527f53667457726170526f757465723a20696e76616c696420676f7665726e6f720060448201526064016103ef565b6001600160a01b0387166125d45760405162461bcd60e51b815260206004820152602560248201527f53667457726170526f757465723a20696e76616c6964206f70656e46756e644d604482015264185c9ad95d60da1b60648201526084016103ef565b6001600160a01b0386166126405760405162461bcd60e51b815260206004820152602d60248201527f53667457726170526f757465723a20696e76616c69642073667457726170706560448201526c64546f6b656e466163746f727960981b60648201526084016103ef565b61264933612f82565b61265288612f96565b61265a612fa7565b606480546001600160a01b03808a166001600160a01b031992831617909255606580549289169290911691909117905583156126d057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6032546001600160a01b031633146127045760405162461bcd60e51b81526004016103ef906137cc565b6033546040517f7d767be5a57784412a13945bd5114db84487d2b007bfcdb2f449fc9ea35437f791612743916001600160a01b03909116908490613486565b60405180910390a1603380546001600160a01b0319166001600160a01b0392909216919091179055565b6040516307a42e0160e11b815260009085906001600160a01b03821690630f485c02906127a29088908890889060040161387f565b6020604051808303816000875af11580156127c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190613337565b604051630310ed7f60e41b815260048101849052602481018390526044810182905284906001600160a01b0382169063310ed7f090606401600060405180830381600087803b15801561283757600080fd5b505af115801561284b573d6000803e3d6000fd5b505050505050505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0384160161292457604080516000808252602082019092526001600160a01b0384169083906040516128a5919061389e565b60006040518083038185875af1925050503d80600081146128e2576040519150601f19603f3d011682016040523d82523d6000602084013e6128e7565b606091505b505090508061291e5760405162461bcd60e51b815260206004820152600360248201526253544560e81b60448201526064016103ef565b50505050565b6000836001600160a01b03163b1161294e5760405162461bcd60e51b81526004016103ef906138cd565b600080846001600160a01b031663a9059cbb60e01b8585604051602401612976929190613350565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516129b4919061389e565b6000604051808303816000865af19150503d80600081146129f1576040519150601f19603f3d011682016040523d82523d6000602084013e6129f6565b606091505b5091509150818015612a20575080511580612a20575080806020019051810190612a2091906137b1565b612a515760405162461bcd60e51b815260206004820152600260248201526114d560f21b60448201526064016103ef565b5050505050565b6000612a62612fb9565b805490915060011901612a8857604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b604051632142170760e11b815283906001600160a01b038216906342842e0e90612ac0908690309087906004016138f9565b600060405180830381600087803b158015612ada57600080fd5b505af11580156126d0573d6000803e3d6000fd5b6040516307a42e0160e11b815260009084906001600160a01b03821690630f485c0290612b239087903090889060040161387f565b6020604051808303816000875af1158015612b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebe9190613337565b6000612b70612fb9565b6001905550565b604051632142170760e11b815283906001600160a01b038216906342842e0e90612ac0903090879087906004016138f9565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03841601612c6c57326001600160a01b0383161480612bed5750336001600160a01b038316145b612c2b5760405162461bcd60e51b815260206004820152600f60248201526e0e6cadcc8cae440dad2e6dac2e8c6d608b1b60448201526064016103ef565b80341015610acb5760405162461bcd60e51b815260206004820152600e60248201526d0ecc2d8eaca40dad2e6dac2e8c6d60931b60448201526064016103ef565b6000836001600160a01b03163b11612c965760405162461bcd60e51b81526004016103ef906138cd565b600080846001600160a01b03166323b872dd60e01b853086604051602401612cc0939291906138f9565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612cfe919061389e565b6000604051808303816000865af19150503d8060008114612d3b576040519150601f19603f3d011682016040523d82523d6000602084013e612d40565b606091505b5091509150818015612d6a575080511580612d6a575080806020019051810190612d6a91906137b1565b612a515760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b60448201526064016103ef565b60405163095ea7b360e01b815283906001600160a01b0382169063095ea7b390612ac09086908690600401613350565b6040516323b872dd60e01b815283906001600160a01b038216906323b872dd90612ac0903090879087906004016138f9565b6040516323b872dd60e01b815283906001600160a01b038216906323b872dd90612ac0908690309087906004016138f9565b6000836001600160a01b03163b11612e5a5760405162461bcd60e51b81526004016103ef906138cd565b600080846001600160a01b031663095ea7b360e01b8585604051602401612e82929190613350565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612ec0919061389e565b6000604051808303816000865af19150503d8060008114612efd576040519150601f19603f3d011682016040523d82523d6000602084013e612f02565b606091505b5091509150818015612f2c575080511580612f2c575080806020019051810190612f2c91906137b1565b612a515760405162461bcd60e51b815260206004820152600360248201526229a0a360e91b60448201526064016103ef565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b612f8a612fdd565b612f9381613002565b50565b612f9e612fdd565b612f938161304e565b612faf612fdd565b612fb7613092565b565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b612fe561309a565b612fb757604051631afcd79f60e31b815260040160405180910390fd5b61300a612fdd565b600080546001600160a01b0319166001600160a01b03831617815560405160008051602061395e83398151915291613043918490613486565b60405180910390a150565b613056612fdd565b603280546001600160a01b0319166001600160a01b03831617905560405160008051602061393e83398151915290613043906000908490613486565b612b66612fdd565b60006130a4612f5e565b54600160401b900460ff16919050565b6001600160a01b0381168114612f9357600080fd5b60008083601f8401126130db57600080fd5b5081356001600160401b038111156130f257600080fd5b60208301915083602082850101111561310a57600080fd5b9250929050565b60008060008060008060a0878903121561312a57600080fd5b8635613135816130b4565b955060208701359450604087013593506060870135925060808701356001600160401b0381111561316557600080fd5b61317189828a016130c9565b979a9699509497509295939492505050565b60006020828403121561319557600080fd5b81356001600160e01b03198116811461247157600080fd5b6001600160a01b0391909116815260200190565b6000806000606084860312156131d657600080fd5b83356131e1816130b4565b95602085013595506040909401359392505050565b60008060008060006080868803121561320e57600080fd5b8535613219816130b4565b94506020860135613229816130b4565b93506040860135925060608601356001600160401b0381111561324b57600080fd5b613257888289016130c9565b969995985093965092949392505050565b60006020828403121561327a57600080fd5b5035919050565b6000806040838503121561329457600080fd5b50508035926020909101359150565b6000602082840312156132b557600080fd5b8135612471816130b4565b6000806000606084860312156132d557600080fd5b83356132e0816130b4565b925060208401356132f0816130b4565b91506040840135613300816130b4565b809150509250925092565b6000806040838503121561331e57600080fd5b8235613329816130b4565b946020939093013593505050565b60006020828403121561334957600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b8051613374816130b4565b919050565b60006020828403121561338b57600080fd5b8151612471816130b4565b6020808252602c908201527f53667457726170526f757465723a20736674207772617070656420746f6b656e60408201526b081b9bdd0818dc99585d195960a21b606082015260800190565b60208082526027908201527f53667457726170526f757465723a207374616b6520616d6f756e742063616e6e60408201526606f7420626520360cc1b606082015260800190565b6020808252601f908201527f53667457726170526f757465723a206e6f74206f776e65642073667420696400604082015260600190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6001600160a01b0392831681529116602082015260400190565b604051606081016001600160401b03811182821017156134d057634e487b7160e01b600052604160045260246000fd5b60405290565b60405161014081016001600160401b03811182821017156134d057634e487b7160e01b600052604160045260246000fd5b60006080828403121561351957600080fd5b604051608081016001600160401b038111828210171561354957634e487b7160e01b600052604160045260246000fd5b8060405250809150825161355c816130b4565b8152602083015161356c816130b4565b8060208301525060408301516040820152606083015160608201525092915050565b80516001600160401b038116811461337457600080fd5b6000606082840312156135b757600080fd5b6135bf6134a0565b9050815161ffff811681146135d357600080fd5b815260208201516135e3816130b4565b60208201526135f46040830161358e565b604082015292915050565b60006060828403121561361157600080fd5b6136196134a0565b90508151613626816130b4565b81526020820151613636816130b4565b602082015260408201516135f4816130b4565b600060a0828403121561365b57600080fd5b60405160a081016001600160401b038111828210171561368b57634e487b7160e01b600052604160045260246000fd5b80604052508091508251815260208301516020820152604083015160408201526136b76060840161358e565b60608201526136c86080840161358e565b60808201525092915050565b8051801515811461337457600080fd5b60006102a082840312156136f757600080fd5b6136ff6134d6565b6137098484613507565b815261371884608085016135a5565b602082015261372a8460e085016135ff565b604082015261373d846101408501613649565b606082015261374f6101e08401613369565b60808201526137616102008401613369565b60a08201526137736102208401613369565b60c0820152613785610240840161358e565b60e082015261379761026084016136d4565b610100820152610280929092015161012083015250919050565b6000602082840312156137c357600080fd5b612471826136d4565b6020808252600d908201526c37b7363c9033b7bb32b93737b960991b604082015260600190565b918252602082015260400190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561076e5761076e613801565b8082018082111561076e5761076e613801565b60208082526022908201527f53667457726170526f757465723a20696e76616c696420737774206164647265604082015261737360f01b606082015260800190565b9283526001600160a01b03919091166020830152604082015260600190565b6000825160005b818110156138bf57602081860181015185830152016138a5565b506000920191825250919050565b602080825260129082015271696e76616c696420756e6465726c79696e6760701b604082015260600190565b6001600160a01b03938416815291909216602082015260408101919091526060019056fecf7d371620e0fb0f1a97aa90ebc4b6c044a5052171635dc739ad8474f9efb5131ba669d4a78521f2ad26e8e0fcbcdd626a63f34d68f326bc232a3abe2a5d042af9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dca2646970667358221220b0a09c512581159d838c45d2c4717f66657a3a087b5bacc64ab1591bc310d36164736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9528,
        "contract": "contracts/SftWrapRouter.sol:SftWrapRouter",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9530,
        "contract": "contracts/SftWrapRouter.sol:SftWrapRouter",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9625,
        "contract": "contracts/SftWrapRouter.sol:SftWrapRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 9741,
        "contract": "contracts/SftWrapRouter.sol:SftWrapRouter",
        "label": "governor",
        "offset": 0,
        "slot": "50",
        "type": "t_address"
      },
      {
        "astId": 9743,
        "contract": "contracts/SftWrapRouter.sol:SftWrapRouter",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 9838,
        "contract": "contracts/SftWrapRouter.sol:SftWrapRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 3461,
        "contract": "contracts/SftWrapRouter.sol:SftWrapRouter",
        "label": "openFundMarket",
        "offset": 0,
        "slot": "100",
        "type": "t_address"
      },
      {
        "astId": 3463,
        "contract": "contracts/SftWrapRouter.sol:SftWrapRouter",
        "label": "sftWrappedTokenFactory",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 3469,
        "contract": "contracts/SftWrapRouter.sol:SftWrapRouter",
        "label": "holdingSftIds",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4769,
        "contract": "contracts/SftWrapRouter.sol:SftWrapRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}