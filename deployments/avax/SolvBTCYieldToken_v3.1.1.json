{
  "address": "0xa45716a26274D4C5F12CeD534Fb6B1fA9EF7aCf8",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "BlacklistableBlacklistedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "BlacklistableNotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlacklistableZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ERC3525NotReceivable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ERC721NotReceivable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PausablePauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SolvBTCNotBlacklisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SolvBTCZeroValueNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "BlacklistAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBlacklistManager",
          "type": "address"
        }
      ],
      "name": "BlacklistManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "BlacklistRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DestroyBlackFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "SetAlias",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "SetOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SOLVBTC_MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SOLVBTC_POOL_BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "addBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts_",
          "type": "address[]"
        }
      ],
      "name": "addBlacklistBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blacklistManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "destroyBlackFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "getSharesByValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "getValueByShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC3525Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "removeBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts_",
          "type": "address[]"
        }
      ],
      "name": "removeBlacklistBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "setAlias",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle_",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        }
      ],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBlacklistManager_",
          "type": "address"
        }
      ],
      "name": "updateBlacklistManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x254fdbba36179ab57b39b12f67bc8fd3c99417d418e58b8c46ba4c2f94f9bfe1",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x55C09707Fd7aFD670e82A62FaeE312903940013E",
    "contractAddress": null,
    "transactionIndex": 5,
    "gasUsed": "2238192",
    "logsBloom": "0x
    "blockHash": "0x4b1751975117cf68ec0cb977fa32e3932dc3d6431b2bcac662ef1cdef5eadff3",
    "transactionHash": "0x254fdbba36179ab57b39b12f67bc8fd3c99417d418e58b8c46ba4c2f94f9bfe1",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 59500543,
        "transactionHash": "0x254fdbba36179ab57b39b12f67bc8fd3c99417d418e58b8c46ba4c2f94f9bfe1",
        "address": "0xa45716a26274D4C5F12CeD534Fb6B1fA9EF7aCf8",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 13,
        "blockHash": "0x4b1751975117cf68ec0cb977fa32e3932dc3d6431b2bcac662ef1cdef5eadff3"
      }
    ],
    "blockNumber": 59500543,
    "cumulativeGasUsed": "2757045",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "999c28c90b1095bcdd73364e215d529a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistableBlacklistedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistableNotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlacklistableZeroAddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC3525NotReceivable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC721NotReceivable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausablePauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SolvBTCNotBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SolvBTCZeroValueNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"BlacklistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlacklistManager\",\"type\":\"address\"}],\"name\":\"BlacklistManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"BlacklistRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DestroyBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"SetAlias\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLVBTC_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLVBTC_POOL_BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"}],\"name\":\"addBlacklistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getSharesByValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"getValueByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC3525Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"}],\"name\":\"removeBlacklistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setAlias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBlacklistManager_\",\"type\":\"address\"}],\"name\":\"updateBlacklistManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"BlacklistableBlacklistedAccount(address)\":[{\"details\":\"Account is blacklisted.\"}],\"BlacklistableNotManager(address)\":[{\"details\":\"Operates by non blacklist manager.\"}],\"BlacklistableZeroAddressNotAllowed()\":[{\"details\":\"Zero address is not allowed.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"PausablePauser(address)\":[{\"details\":\"Operates by non pauser.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SolvBTCNotBlacklisted(address)\":[{\"details\":\"Account is not blacklisted.\"}],\"SolvBTCZeroValueNotAllowed()\":[{\"details\":\"Mint or burn zero value is not allowed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addBlacklist(address)\":{\"params\":{\"account_\":\"The address to blacklist.\"}},\"addBlacklistBatch(address[])\":{\"params\":{\"accounts_\":\"The addresses to blacklist.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isBlacklisted(address)\":{\"params\":{\"account_\":\"The address to check.\"},\"returns\":{\"_0\":\"True if the account is blacklisted, false if the account is not blacklisted.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onERC3525Received(address,uint256,uint256,uint256,bytes)\":{\"details\":\"Deprecated function inherited from SolvBTC V2, since the values of deprecated variables have been cleared, this function would be deleted from V2.1.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"removeBlacklist(address)\":{\"params\":{\"account_\":\"The address to remove from the blacklist.\"}},\"removeBlacklistBatch(address[])\":{\"params\":{\"accounts_\":\"The addresses to remove from the blacklist.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAlias(string,string)\":{\"details\":\"Sets the alias name and symbol of the SolvBTC yield token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"updateBlacklistManager(address)\":{\"params\":{\"newBlacklistManager_\":\"The address of the new blacklist manager.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DestroyBlackFunds(address,uint256)\":{\"notice\":\"Emitted when black funds are destroyed.\"}},\"kind\":\"user\",\"methods\":{\"SOLVBTC_MINTER_ROLE()\":{\"notice\":\"`SOLVBTC_MINTER` role is allowed to mint SolvBTC tokens, as well as to burn SolvBTC tokens held by itself.\"},\"SOLVBTC_POOL_BURNER_ROLE()\":{\"notice\":\"`SOLVBTC_POOL_BURNER` role is allowed to burn SolvBTC tokens from other accounts only when necessary.\"},\"addBlacklist(address)\":{\"notice\":\"Adds account to blacklist.\"},\"addBlacklistBatch(address[])\":{\"notice\":\"Adds multiple accounts to the blacklist.\"},\"blacklistManager()\":{\"notice\":\"Get the address of the blacklist manager.\"},\"destroyBlackFunds(address,uint256)\":{\"notice\":\"Destroys black funds from the specified blacklist account.\"},\"getSharesByValue(uint256)\":{\"notice\":\"Get amount of shares for a given amount of underlying asset.\"},\"getValueByShares(uint256)\":{\"notice\":\"Get amount of underlying asset for a given amount of shares.\"},\"isBlacklisted(address)\":{\"notice\":\"Checks if account is blacklisted.\"},\"removeBlacklist(address)\":{\"notice\":\"Removes account from blacklist.\"},\"removeBlacklistBatch(address[])\":{\"notice\":\"Removes multiple accounts from the blacklist.\"},\"updateBlacklistManager(address)\":{\"notice\":\"Updates the blacklist manager address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SolvBTCYieldTokenV3_1.sol\":\"SolvBTCYieldTokenV3_1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/ISolvBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC721Receiver} from \\\"./external/IERC721Receiver.sol\\\";\\nimport {IERC3525Receiver} from \\\"./external/IERC3525Receiver.sol\\\";\\n\\n/**\\n * @title Interface for SolvBTC.\\n * @custom:security-contact dev@solv.finance\\n */\\ninterface ISolvBTC is IERC20, IERC721Receiver, IERC3525Receiver, IERC165 {\\n\\n    error ERC721NotReceivable(address token);\\n    error ERC3525NotReceivable(address token);\\n\\n    function mint(address account_, uint256 value_) external;\\n    function burn(address account_, uint256 value_) external;\\n    function burn(uint256 value_) external;\\n}\",\"keccak256\":\"0x05494aade95c10a3f6bc2cbddcbe0cb11ff7fa22d284c8e2f154dfb81eab4feb\",\"license\":\"MIT\"},\"contracts/ISolvBTCMultiAssetPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface ISolvBTCMultiAssetPool {\\n    function deposit(address sft_, uint256 sftId_, uint256 value_) external;\\n    function withdraw(address sft, uint256 slot, uint256 sftId, uint256 value) external returns (uint256 toSftId_);\\n\\n    function isSftSlotDepositAllowed(address sft_, uint256 slot_) external view returns (bool);\\n    function isSftSlotWithdrawAllowed(address sft_, uint256 slot_) external view returns (bool);\\n    function getERC20(address sft_, uint256 slot_) external view returns (address);\\n    function getHoldingValueSftId(address sft_, uint256 slot_) external view returns (uint256);\\n    function getSftSlotBalance(address sft_, uint256 slot_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e4a30dbc2a3fa311bb7148ab28d3f71310358c667aa665d5428f50b2d603cf2\",\"license\":\"MIT\"},\"contracts/ISolvBTCYieldToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"./SolvBTC.sol\\\";\\n\\ninterface ISolvBTCYieldToken is ISolvBTC {\\n    function getValueByShares(uint256 shares) external view returns (uint256 value);\\n    function getSharesByValue(uint256 value) external view returns (uint256 shares);\\n    function getOracleDecimals() external view returns (uint8);\\n    function getOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x72fc31da791a37b7f3890c169612457ef809487c030bff9f94157c998ffef614\",\"license\":\"MIT\"},\"contracts/ISolvBTCYieldTokenOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface ISolvBTCYieldTokenOracle {\\n    function getNav(address erc20) external view returns (uint256);\\n    function navDecimals(address erc20) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa439635d003b7fb2e0ea5c190e576b5687f0c8d01a206c5f7288dae5866b4a92\",\"license\":\"MIT\"},\"contracts/SolvBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"./utils/ERC3525TransferHelper.sol\\\";\\nimport \\\"./ISolvBTC.sol\\\";\\nimport \\\"./SolvBTCMultiAssetPool.sol\\\";\\n\\ncontract SolvBTC is ISolvBTC, ERC20Upgradeable, ReentrancyGuardUpgradeable, Ownable2StepUpgradeable, AccessControlUpgradeable {\\n\\n    /// @custom:storage-location erc7201:solv.storage.SolvBTC\\n    struct SolvBTCStorage {\\n        address _solvBTCMultiAssetPool;\\n    }\\n\\n    address public wrappedSftAddress;\\n    uint256 public wrappedSftSlot;\\n    address public navOracle;\\n    uint256 public holdingValueSftId;\\n    uint256[] internal _holdingEmptySftIds;\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"solv.storage.SolvBTC\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant SolvBTCStorageLocation = 0x25351088c72db31d4a47cbdabb12f8d9c124b300211236164ae2941317058400;\\n\\n    bytes32 public constant SOLVBTC_MINTER_ROLE = keccak256(abi.encodePacked(\\\"SOLVBTC_MINTER\\\"));\\n    bytes32 public constant SOLVBTC_POOL_BURNER_ROLE = keccak256(abi.encodePacked(\\\"SOLVBTC_POOL_BURNER\\\"));\\n\\n    event SetSolvBTCMultiAssetPool(address indexed solvBTCMultiAssetPool);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(string memory name_, string memory symbol_) external virtual initializer {\\n        ERC20Upgradeable.__ERC20_init(name_, symbol_);\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n    }\\n\\n    function initializeV2(address solvBTCMultiAssetPool_) external virtual reinitializer(2) {\\n        require(msg.sender == 0x55C09707Fd7aFD670e82A62FaeE312903940013E, \\\"SolvBTC: only owner\\\");\\n        _transferOwnership(msg.sender);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        _setSolvBTCMultiAssetPool(solvBTCMultiAssetPool_);\\n\\n        if (holdingValueSftId != 0) {\\n            ERC3525TransferHelper.doTransferOut(wrappedSftAddress, solvBTCMultiAssetPool(), holdingValueSftId);\\n        }\\n        wrappedSftAddress = address(0);\\n        wrappedSftSlot = 0;\\n        navOracle = address(0);\\n        holdingValueSftId = 0;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlUpgradeable, IERC165) returns (bool) {\\n        return \\n            interfaceId == type(IERC3525Receiver).interfaceId || \\n            interfaceId == type(IERC721Receiver).interfaceId || \\n            interfaceId == type(IERC165).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC3525Received(\\n        address, /* operator_ */\\n        uint256 /* fromSftId_ */,\\n        uint256 /* sftId_ */,\\n        uint256 /* value_ */,\\n        bytes calldata /* data_ */\\n    ) external virtual override returns (bytes4) {\\n        revert ERC3525NotReceivable(msg.sender);\\n    }\\n\\n    function onERC721Received(\\n        address /* operator_ */, \\n        address /* from_ */, \\n        uint256 /* sftId_ */, \\n        bytes calldata /* data_ */ \\n    ) external virtual override returns (bytes4) {\\n        revert ERC721NotReceivable(msg.sender);\\n    }\\n\\n    function mint(address account_, uint256 value_) external virtual nonReentrant onlyRole(SOLVBTC_MINTER_ROLE) {\\n        require(value_ > 0, \\\"SolvBTC: mint value cannot be 0\\\");\\n        _mint(account_, value_);\\n    }\\n\\n    function burn(uint256 value_) external virtual nonReentrant onlyRole(SOLVBTC_MINTER_ROLE) {\\n        require(value_ > 0, \\\"SolvBTC: burn value cannot be 0\\\");\\n        _burn(msg.sender, value_);\\n    }\\n\\n    function burn(address account_, uint256 value_) external virtual nonReentrant onlyRole(SOLVBTC_POOL_BURNER_ROLE) {\\n        require(value_ > 0, \\\"SolvBTC: burn value cannot be 0\\\");\\n        _burn(account_, value_);\\n    }\\n\\n    function sweepEmptySftIds(address sft_, uint256 sweepAmount_) external virtual {\\n        uint256 length = _holdingEmptySftIds.length;\\n        for (uint256 i = 0; i < length && i < sweepAmount_; i++) {\\n            uint256 lastSftId = _holdingEmptySftIds[_holdingEmptySftIds.length - 1];\\n            ERC3525TransferHelper.doTransferOut(sft_, 0x000000000000000000000000000000000000dEaD, lastSftId);\\n            _holdingEmptySftIds.pop();\\n        }\\n        if (_holdingEmptySftIds.length == 0) {\\n            delete _holdingEmptySftIds;\\n        }\\n    }\\n\\n    function _getSolvBTCStorage() private pure returns (SolvBTCStorage storage $) {\\n        assembly {\\n            $.slot := SolvBTCStorageLocation\\n        }\\n    }\\n\\n    function solvBTCMultiAssetPool() public view virtual returns (address) {\\n        SolvBTCStorage storage $ = _getSolvBTCStorage();\\n        return $._solvBTCMultiAssetPool;\\n    }\\n\\n    function _setSolvBTCMultiAssetPool(address solvBTCMultiAssetPool_) internal virtual {\\n        require(solvBTCMultiAssetPool_ != address(0), \\\"SolvBTC: invalid solvBTCMultiAssetPool address\\\");\\n        SolvBTCStorage storage $ = _getSolvBTCStorage();\\n        require($._solvBTCMultiAssetPool == address(0), \\\"SolvBTC: solvBTCMultiAssetPool already set\\\");\\n        $._solvBTCMultiAssetPool = solvBTCMultiAssetPool_;\\n        emit SetSolvBTCMultiAssetPool(solvBTCMultiAssetPool_);\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x51cbee1f2e340b0f3ac9bc7dc1a7c2450a298f0d03373a3bb3fdd8f2d3c76834\",\"license\":\"MIT\"},\"contracts/SolvBTCMultiAssetPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./access/AdminControlUpgradeable.sol\\\";\\nimport \\\"./utils/ERC3525TransferHelper.sol\\\";\\nimport \\\"./external/IERC3525.sol\\\";\\nimport \\\"./ISolvBTCMultiAssetPool.sol\\\";\\nimport \\\"./ISolvBTC.sol\\\";\\n\\ncontract SolvBTCMultiAssetPool is ISolvBTCMultiAssetPool, ReentrancyGuardUpgradeable, AdminControlUpgradeable {\\n    struct SftSlotInfo {\\n        uint256 holdingValueSftId;\\n        address erc20;\\n        bool depositAllowed;\\n        bool withdrawAllowed;\\n    }\\n\\n    mapping(address => mapping(uint256 => SftSlotInfo)) internal _sftSlotInfos;\\n\\n    event AddSftSlot(address indexed sft, uint256 indexed slot, address indexed erc20, uint256 holdingValueSftId);\\n    event SftSlotAllowedChanged(address indexed sft, uint256 indexed slot, bool depositAllowed, bool withdrawAllowed);\\n    event Deposit(\\n        address indexed owner, address indexed sft, uint256 indexed slot, address erc20, uint256 sftId, uint256 value\\n    );\\n    event Withdraw(\\n        address indexed owner, address indexed sft, uint256 indexed slot, address erc20, uint256 sftId, uint256 value\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize() external virtual initializer {\\n        AdminControlUpgradeable.__AdminControl_init(msg.sender);\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n    }\\n\\n    function deposit(address sft_, uint256 sftId_, uint256 value_) external virtual override nonReentrant {\\n        require(value_ > 0, \\\"SolvBTCMultiAssetPool: deposit amount cannot be 0\\\");\\n        require(msg.sender == IERC3525(sft_).ownerOf(sftId_), \\\"SolvBTCMultiAssetPool: caller is not sft owner\\\");\\n\\n        uint256 slot = IERC3525(sft_).slotOf(sftId_);\\n        SftSlotInfo storage sftSlotInfo = _sftSlotInfos[sft_][slot];\\n        require(sftSlotInfo.depositAllowed, \\\"SolvBTCMultiAssetPool: sft slot deposit not allowed\\\");\\n\\n        uint256 sftBalance = IERC3525(sft_).balanceOf(sftId_);\\n        if (value_ == sftBalance) {\\n            ERC3525TransferHelper.doTransferIn(sft_, msg.sender, sftId_);\\n            if (sftSlotInfo.holdingValueSftId == 0) {\\n                sftSlotInfo.holdingValueSftId = sftId_;\\n            } else {\\n                ERC3525TransferHelper.doTransfer(sft_, sftId_, sftSlotInfo.holdingValueSftId, value_);\\n                ERC3525TransferHelper.doTransferOut(sft_, 0x000000000000000000000000000000000000dEaD, sftId_);\\n            }\\n        } else if (value_ < sftBalance) {\\n            if (sftSlotInfo.holdingValueSftId == 0) {\\n                sftSlotInfo.holdingValueSftId = ERC3525TransferHelper.doTransferIn(sft_, sftId_, value_);\\n            } else {\\n                ERC3525TransferHelper.doTransfer(sft_, sftId_, sftSlotInfo.holdingValueSftId, value_);\\n            }\\n        } else {\\n            revert(\\\"SolvBTCMultiAssetPool: deposit amount exceeds sft balance\\\");\\n        }\\n\\n        ISolvBTC(sftSlotInfo.erc20).mint(msg.sender, value_);\\n        emit Deposit(msg.sender, sft_, slot, sftSlotInfo.erc20, sftId_, value_);\\n    }\\n\\n    function withdraw(address sft_, uint256 slot_, uint256 sftId_, uint256 value_)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        returns (uint256 toSftId_)\\n    {\\n        require(value_ > 0, \\\"SolvBTCMultiAssetPool: withdraw amount cannot be 0\\\");\\n\\n        SftSlotInfo storage sftSlotInfo = _sftSlotInfos[sft_][slot_];\\n        require(sftSlotInfo.withdrawAllowed, \\\"SolvBTCMultiAssetPool: sft slot not allowed\\\");\\n\\n        uint256 sftSlotBalance = getSftSlotBalance(sft_, slot_);\\n        require(value_ <= sftSlotBalance, \\\"SolvBTCMultiAssetPool: insufficient balance\\\");\\n\\n        ISolvBTC(sftSlotInfo.erc20).burn(msg.sender, value_);\\n\\n        if (sftId_ == 0) {\\n            toSftId_ = ERC3525TransferHelper.doTransferOut(sft_, sftSlotInfo.holdingValueSftId, msg.sender, value_);\\n        } else {\\n            require(slot_ == IERC3525(sft_).slotOf(sftId_), \\\"SolvBTCMultiAssetPool: slot not matched\\\");\\n            require(msg.sender == IERC3525(sft_).ownerOf(sftId_), \\\"SolvBTCMultiAssetPool: caller is not sft owner\\\");\\n            ERC3525TransferHelper.doTransfer(sft_, sftSlotInfo.holdingValueSftId, sftId_, value_);\\n            toSftId_ = sftId_;\\n        }\\n\\n        emit Withdraw(msg.sender, sft_, slot_, sftSlotInfo.erc20, toSftId_, value_);\\n    }\\n\\n    function addSftSlotOnlyAdmin(address sft_, uint256 slot_, address erc20_, uint256 holdingValueSftId_)\\n        external\\n        virtual\\n        onlyAdmin\\n    {\\n        SftSlotInfo storage sftSlotInfo = _sftSlotInfos[sft_][slot_];\\n        require(sftSlotInfo.erc20 == address(0), \\\"SolvBTCMultiAssetPool: sft slot already existed\\\");\\n        require(\\n            IERC3525(sft_).valueDecimals() == IERC20Metadata(erc20_).decimals(),\\n            \\\"SolvBTCMultiAssetPool: decimals not matched\\\"\\n        );\\n        if (holdingValueSftId_ > 0) {\\n            require(IERC3525(sft_).slotOf(holdingValueSftId_) == slot_, \\\"SolvBTCMultiAssetPool: slot not matched\\\");\\n            require(\\n                IERC3525(sft_).ownerOf(holdingValueSftId_) == address(this), \\\"SolvBTCMultiAssetPool: sftId not owned\\\"\\n            );\\n        }\\n\\n        sftSlotInfo.holdingValueSftId = holdingValueSftId_;\\n        sftSlotInfo.erc20 = erc20_;\\n        sftSlotInfo.depositAllowed = true;\\n        sftSlotInfo.withdrawAllowed = true;\\n        emit AddSftSlot(sft_, slot_, erc20_, holdingValueSftId_);\\n    }\\n\\n    function changeSftSlotAllowedOnlyAdmin(address sft_, uint256 slot_, bool depositAllowed_, bool withdrawAllowed_)\\n        external\\n        virtual\\n        onlyAdmin\\n    {\\n        SftSlotInfo storage sftSlotInfo = _sftSlotInfos[sft_][slot_];\\n        require(sftSlotInfo.erc20 != address(0), \\\"SolvBTCMultiAssetPool: sft slot not existed\\\");\\n\\n        sftSlotInfo.depositAllowed = depositAllowed_;\\n        sftSlotInfo.withdrawAllowed = withdrawAllowed_;\\n        emit SftSlotAllowedChanged(sft_, slot_, depositAllowed_, withdrawAllowed_);\\n    }\\n\\n    function isSftSlotDepositAllowed(address sft_, uint256 slot_) public view virtual override returns (bool) {\\n        return _sftSlotInfos[sft_][slot_].depositAllowed;\\n    }\\n\\n    function isSftSlotWithdrawAllowed(address sft_, uint256 slot_) public view virtual override returns (bool) {\\n        return _sftSlotInfos[sft_][slot_].withdrawAllowed;\\n    }\\n\\n    function getERC20(address sft_, uint256 slot_) public view virtual override returns (address) {\\n        return _sftSlotInfos[sft_][slot_].erc20;\\n    }\\n\\n    function getHoldingValueSftId(address sft_, uint256 slot_) public view virtual override returns (uint256) {\\n        return _sftSlotInfos[sft_][slot_].holdingValueSftId;\\n    }\\n\\n    function getSftSlotBalance(address sft_, uint256 slot_) public view virtual override returns (uint256) {\\n        SftSlotInfo storage sftSlotInfo = _sftSlotInfos[sft_][slot_];\\n        return sftSlotInfo.holdingValueSftId == 0 ? 0 : IERC3525(sft_).balanceOf(sftSlotInfo.holdingValueSftId);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7cd717ae517314949d366769f284f998c658667193a2d3e59e96b3e49766dc41\",\"license\":\"MIT\"},\"contracts/SolvBTCV2_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {Ownable2StepUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {ISolvBTC, IERC721Receiver, IERC3525Receiver, IERC165} from \\\"./ISolvBTC.sol\\\";\\n\\n/**\\n * @title Implementation for SolvBTC V2.1, which is inherited from SolvBTC V2.\\n * @dev This version is upgraded from SolvBTC V2 with the removal of deprecated variables and functions. \\n * @custom:security-contact dev@solv.finance\\n */\\ncontract SolvBTCV2_1 is ISolvBTC, ERC20Upgradeable, ReentrancyGuardUpgradeable, Ownable2StepUpgradeable, AccessControlUpgradeable {\\n\\n    /// @custom:storage-location erc7201:solv.storage.SolvBTC\\n    // struct SolvBTCStorage {\\n    //     address _solvBTCMultiAssetPool;\\n    // }\\n\\n    /**\\n     * @dev Deprecated variables inherited from SolvBTC V1, the values of which have been cleared in V2.\\n     * Thus the declaration of these variables would be removed from V2.1.\\n     */\\n    // address public wrappedSftAddress;\\n    // uint256 public wrappedSftSlot;\\n    // address public navOracle;\\n    // uint256 public holdingValueSftId;\\n    // uint256[] internal _holdingEmptySftIds;\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"solv.storage.SolvBTC\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    // bytes32 private constant SolvBTCStorageLocation = 0x25351088c72db31d4a47cbdabb12f8d9c124b300211236164ae2941317058400;\\n\\n    /// @notice `SOLVBTC_MINTER` role is allowed to mint SolvBTC tokens, as well as to burn SolvBTC tokens held by itself.\\n    bytes32 public constant SOLVBTC_MINTER_ROLE = keccak256(abi.encodePacked(\\\"SOLVBTC_MINTER\\\"));\\n\\n    /// @notice `SOLVBTC_POOL_BURNER` role is allowed to burn SolvBTC tokens from other accounts only when necessary.\\n    bytes32 public constant SOLVBTC_POOL_BURNER_ROLE = keccak256(abi.encodePacked(\\\"SOLVBTC_POOL_BURNER\\\"));\\n\\n    // event SetSolvBTCMultiAssetPool(address indexed solvBTCMultiAssetPool);\\n\\n    /**\\n     * @dev Mint or burn zero value is not allowed.\\n     */\\n    error SolvBTCZeroValueNotAllowed();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(string memory name_, string memory symbol_, address owner_) external virtual initializer {\\n        ERC20Upgradeable.__ERC20_init(name_, symbol_);\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n        _transferOwnership(owner_);\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner_);\\n    }\\n\\n    /**\\n     * @dev Deprecated function inherited from SolvBTC V2, since the values of deprecated variables have been\\n     * cleared, this function would be deleted from V2.1.\\n     */\\n    // function initializeV2(address solvBTCMultiAssetPool_) external virtual reinitializer(2) {\\n    //     require(msg.sender == 0x55C09707Fd7aFD670e82A62FaeE312903940013E, \\\"SolvBTC: only owner\\\");\\n    //     _transferOwnership(msg.sender);\\n    //     _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    //     _setSolvBTCMultiAssetPool(solvBTCMultiAssetPool_);\\n\\n    //     if (holdingValueSftId != 0) {\\n    //         ERC3525TransferHelper.doTransferOut(wrappedSftAddress, solvBTCMultiAssetPool(), holdingValueSftId);\\n    //     }\\n    //     wrappedSftAddress = address(0);\\n    //     wrappedSftSlot = 0;\\n    //     navOracle = address(0);\\n    //     holdingValueSftId = 0;\\n    // }\\n\\n    function onERC3525Received(\\n        address, /* operator_ */\\n        uint256 /* fromSftId_ */,\\n        uint256 /* sftId_ */,\\n        uint256 /* value_ */,\\n        bytes calldata /* data_ */\\n    ) external virtual override returns (bytes4) {\\n        revert ERC3525NotReceivable(msg.sender);\\n    }\\n\\n    function onERC721Received(\\n        address /* operator_ */, \\n        address /* from_ */, \\n        uint256 /* sftId_ */, \\n        bytes calldata /* data_ */ \\n    ) external virtual override returns (bytes4) {\\n        revert ERC721NotReceivable(msg.sender);\\n    }\\n\\n    function mint(address account_, uint256 value_) external virtual nonReentrant onlyRole(SOLVBTC_MINTER_ROLE) {\\n        if (value_ == 0) {\\n            revert SolvBTCZeroValueNotAllowed();\\n        }\\n        _mint(account_, value_);\\n    }\\n\\n    function burn(uint256 value_) external virtual nonReentrant onlyRole(SOLVBTC_MINTER_ROLE) {\\n        if (value_ == 0) {\\n            revert SolvBTCZeroValueNotAllowed();\\n        }\\n        _burn(msg.sender, value_);\\n    }\\n\\n    function burn(address account_, uint256 value_) external virtual nonReentrant onlyRole(SOLVBTC_POOL_BURNER_ROLE) {\\n        if (value_ == 0) {\\n            revert SolvBTCZeroValueNotAllowed();\\n        }\\n        _burn(account_, value_);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlUpgradeable, IERC165) returns (bool) {\\n        return \\n            interfaceId == type(IERC3525Receiver).interfaceId || \\n            interfaceId == type(IERC721Receiver).interfaceId || \\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Deprecated function inherited from SolvBTC V2, since the empty sft ids would be removed \\n     * before upgrading to V2.1.\\n     */\\n    // function sweepEmptySftIds(address sft_, uint256 sweepAmount_) external virtual {\\n    //     uint256 length = _holdingEmptySftIds.length;\\n    //     for (uint256 i = 0; i < length && i < sweepAmount_; i++) {\\n    //         uint256 lastSftId = _holdingEmptySftIds[_holdingEmptySftIds.length - 1];\\n    //         ERC3525TransferHelper.doTransferOut(sft_, 0x000000000000000000000000000000000000dEaD, lastSftId);\\n    //         _holdingEmptySftIds.pop();\\n    //     }\\n    //     if (_holdingEmptySftIds.length == 0) {\\n    //         delete _holdingEmptySftIds;\\n    //     }\\n    // }\\n\\n    /**\\n     * @dev The following functions are deprecated in SolvBTC V2.1, since the value of `solvBTCMultiAssetPool`\\n     * will not be used in V2.1.\\n     */\\n    // function _getSolvBTCStorage() private pure returns (SolvBTCStorage storage $) {\\n    //     assembly {\\n    //         $.slot := SolvBTCStorageLocation\\n    //     }\\n    // }\\n    // function solvBTCMultiAssetPool() public view virtual returns (address) {\\n    //     SolvBTCStorage storage $ = _getSolvBTCStorage();\\n    //     return $._solvBTCMultiAssetPool;\\n    // }\\n    // function setSolvBTCMultiAssetPool(address solvBTCMultiAssetPool_) external virtual onlyOwner {\\n    //     _setSolvBTCMultiAssetPool(solvBTCMultiAssetPool_);\\n    // }\\n    // function _setSolvBTCMultiAssetPool(address solvBTCMultiAssetPool_) internal virtual {\\n    //     SolvBTCStorage storage $ = _getSolvBTCStorage();\\n    //     $._solvBTCMultiAssetPool = solvBTCMultiAssetPool_;\\n    //     emit SetSolvBTCMultiAssetPool(solvBTCMultiAssetPool_);\\n    // }\\n\\n    /** @dev Use EIP-7201 for storage management instead. */\\n    // uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x08547bbd5b096ecaf1ee357c3c4e290755e927535b4eabca9bef2e5a06ba0743\",\"license\":\"MIT\"},\"contracts/SolvBTCV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport {SolvBTCV2_1} from \\\"./SolvBTCV2_1.sol\\\";\\nimport {BlacklistableUpgradeable} from \\\"./access/BlacklistableUpgradeable.sol\\\";\\n\\n/**\\n * @title Implementation for SolvBTC V3, which is inherited from SolvBTC V2.1 and expanded with \\n * blacklist functionality.\\n * @custom:security-contact dev@solv.finance\\n */\\ncontract SolvBTCV3 is SolvBTCV2_1, BlacklistableUpgradeable {\\n\\n    /**\\n     * @dev Account is not blacklisted.\\n     */\\n    error SolvBTCNotBlacklisted(address account);\\n\\n    /// @notice Emitted when black funds are destroyed.\\n    event DestroyBlackFunds(address indexed account, uint256 amount);\\n\\n    /// @notice Destroys black funds from the specified blacklist account.\\n    function destroyBlackFunds(address account, uint256 amount) external virtual onlyOwner {\\n        if (!isBlacklisted(account)) {\\n            revert SolvBTCNotBlacklisted(account);\\n        }\\n        super._update(account, address(0), amount);\\n        emit DestroyBlackFunds(account, amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent)\\n        internal\\n        virtual\\n        override\\n        notBlacklisted(spender)\\n        notBlacklisted(owner)\\n    {\\n        super._approve(owner, spender, value, emitEvent);\\n    }\\n\\n    function _update(address from, address to, uint256 value)\\n        internal\\n        virtual\\n        override\\n        notBlacklisted(from)\\n        notBlacklisted(to)\\n        notBlacklisted(msg.sender)\\n    {\\n        super._update(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x9939df9de3d48e7cd1ce10aee67e944a90b8c6f928155a41bb038c7e4b0868f3\",\"license\":\"MIT\"},\"contracts/SolvBTCV3_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport {SolvBTCV3} from \\\"./SolvBTCV3.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title Implementation for SolvBTC V3_1, which is inherited from SolvBTC V3 and expanded with\\n * openzeppelin pausable functionality.\\n * @custom:security-contact dev@solv.finance\\n */\\ncontract SolvBTCV3_1 is SolvBTCV3, PausableUpgradeable {\\n    struct SolvBTCV3_1Storage {\\n        address _pauser;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"solv.storage.SolvBTCV3_1\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant SolvBTCV3_1StorageLocation =\\n        0x502a85c8d631e3586414f9cb06ca4d27c03b5f40bf43ea12a9183dd747be5900;\\n\\n    /**\\n     * @dev Operates by non pauser.\\n     */\\n    error PausablePauser(address account);\\n\\n    function _getSolvBTCV3_1Storage() private pure returns (SolvBTCV3_1Storage storage $) {\\n        assembly {\\n            $.slot := SolvBTCV3_1StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev throws if called by any account other than the pauser\\n     */\\n    modifier onlyPauser() {\\n        SolvBTCV3_1Storage storage $ = _getSolvBTCV3_1Storage();\\n        if (msg.sender != $._pauser) {\\n            revert PausablePauser(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    function setPauser(address pauser) external onlyOwner {\\n        SolvBTCV3_1Storage storage $ = _getSolvBTCV3_1Storage();\\n        $._pauser = pauser;\\n    }\\n\\n    function pause() external onlyPauser whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyPauser whenPaused {\\n        _unpause();\\n    }\\n\\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\\n        super._update(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0x5962d37326ca1768d396639e864a2f10413bc0bfbb182fb5bd601d24414aa5a4\",\"license\":\"MIT\"},\"contracts/SolvBTCYieldTokenV2_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"./SolvBTCV2_1.sol\\\";\\nimport \\\"./ISolvBTCYieldToken.sol\\\";\\nimport \\\"./ISolvBTCYieldTokenOracle.sol\\\";\\n\\ncontract SolvBTCYieldTokenV2_1 is SolvBTCV2_1, ISolvBTCYieldToken {\\n\\n    struct SolvBTCYieldTokenStorage {\\n        address _oracle;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"solv.storage.SolvBTCYieldToken\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant SolvBTCYieldTokenStorageLocation = 0xf05073905b1e64f5ceda3673d2f3281ec4d80a5b81532923554d532211661500;\\n\\n    event SetOracle(address indexed oracle);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Get amount of underlying asset for a given amount of shares.\\n     */\\n    function getValueByShares(uint256 shares) external view virtual override returns (uint256 value) {\\n        uint256 currentNav = ISolvBTCYieldTokenOracle(getOracle()).getNav(address(this));\\n        return shares * currentNav / (10 ** decimals());\\n    }\\n\\n    /**\\n     * @notice Get amount of shares for a given amount of underlying asset.\\n     */\\n    function getSharesByValue(uint256 value) external view virtual override returns (uint256 shares) {\\n        uint256 currentNav = ISolvBTCYieldTokenOracle(getOracle()).getNav(address(this));\\n        return currentNav == 0 ? 0 : (value * (10 ** decimals()) / currentNav);\\n    }\\n\\n    function _getSolvBTCLYTStorage() private pure returns (SolvBTCYieldTokenStorage storage $) {\\n        assembly {\\n            $.slot := SolvBTCYieldTokenStorageLocation\\n        }\\n    }\\n\\n    function getOracle() public view virtual override returns (address) {\\n        SolvBTCYieldTokenStorage storage $ = _getSolvBTCLYTStorage();\\n        return $._oracle;\\n    }\\n\\n    function setOracle(address oracle_) external virtual onlyOwner {\\n        require(oracle_ != address(0), \\\"SolvBTCYieldToken: invalid oracle address\\\");\\n        SolvBTCYieldTokenStorage storage $ = _getSolvBTCLYTStorage();\\n        $._oracle = oracle_;\\n        emit SetOracle(oracle_);\\n    }\\n\\n    function getOracleDecimals() external view returns (uint8) {\\n        return ISolvBTCYieldTokenOracle(getOracle()).navDecimals(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xbad24ada4ce4b6f4186093c95af1a9d3c8e579ea6c0202d5c3832e21bbb7b987\",\"license\":\"MIT\"},\"contracts/SolvBTCYieldTokenV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"./SolvBTCYieldTokenV2_1.sol\\\";\\nimport \\\"./SolvBTCV3.sol\\\";\\n\\ncontract SolvBTCYieldTokenV3 is SolvBTCYieldTokenV2_1, SolvBTCV3 {\\n\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent)\\n        internal\\n        virtual\\n        override(ERC20Upgradeable, SolvBTCV3)\\n    {\\n        SolvBTCV3._approve(owner, spender, value, emitEvent);\\n    }\\n\\n    function _update(address from, address to, uint256 value)\\n        internal\\n        virtual\\n        override(ERC20Upgradeable, SolvBTCV3)\\n    {\\n        SolvBTCV3._update(from, to, value);\\n    } \\n\\n}\\n\",\"keccak256\":\"0x6e0e3466e99bdbfa06392644c280ec815095174a35b6ddb3d33349ed4a961f46\",\"license\":\"MIT\"},\"contracts/SolvBTCYieldTokenV3_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"./SolvBTCYieldTokenV3.sol\\\";\\nimport \\\"./SolvBTCV3_1.sol\\\";\\n\\ncontract SolvBTCYieldTokenV3_1 is SolvBTCYieldTokenV3, SolvBTCV3_1 {\\n\\n    event SetAlias(string name, string symbol);\\n\\n    struct AliasStorage {\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"solv.storage.SolvBTCYieldTokenV3_1\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ALIAS_STORAGE_POSITION = 0xda2596346793476faa39ef2fc6f6928de90d835de448231a9734d2e32c5b1400;\\n\\n    function _getAliasStorage() private pure returns (AliasStorage storage $) {\\n        assembly {\\n            $.slot := ALIAS_STORAGE_POSITION\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        AliasStorage storage $ = _getAliasStorage();\\n        if (bytes($._name).length == 0) {\\n            return super.name();\\n        }\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        AliasStorage storage $ = _getAliasStorage();\\n        if (bytes($._symbol).length == 0) {\\n            return super.symbol();\\n        }\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Sets the alias name and symbol of the SolvBTC yield token.\\n     */\\n    function setAlias(string calldata name_, string calldata symbol_) external virtual onlyOwner {\\n        AliasStorage storage $ = _getAliasStorage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n        emit SetAlias(name_, symbol_);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent)\\n        internal\\n        virtual\\n        override(SolvBTCYieldTokenV3, SolvBTCV3)\\n    {\\n        SolvBTCV3._approve(owner, spender, value, emitEvent);\\n    }\\n\\n    function _update(address from, address to, uint256 value)\\n        internal\\n        virtual\\n        override(SolvBTCYieldTokenV3, SolvBTCV3_1)\\n    {\\n        SolvBTCV3_1._update(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0xebb5457941ed6346985531033dbb60fb5228345ed930159ad40c20b77943aea8\",\"license\":\"MIT\"},\"contracts/access/AdminControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract AdminControlUpgradeable is Initializable {\\n\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingAdmin() {\\n        require(msg.sender == pendingAdmin, \\\"only pending admin\\\");\\n        _;\\n    }\\n\\n    function __AdminControl_init(address admin_) internal onlyInitializing {\\n        __AdminControl_init_unchained(admin_);\\n    }\\n\\n    function __AdminControl_init_unchained(address admin_) internal onlyInitializing {\\n        admin = admin_;\\n        emit NewAdmin(address(0), admin_);\\n    }\\n\\n    function transferAdmin(address newPendingAdmin_) external virtual onlyAdmin {\\n        emit NewPendingAdmin(pendingAdmin, newPendingAdmin_);\\n        pendingAdmin = newPendingAdmin_;        \\n    }\\n\\n    function acceptAdmin() external virtual onlyPendingAdmin {\\n        emit NewAdmin(admin, pendingAdmin);\\n        admin = pendingAdmin;\\n        delete pendingAdmin;\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bde55289afe561d40407007b005a6cdc97d7cc3ec98e58866faeb80f63f883\",\"license\":\"MIT\"},\"contracts/access/BlacklistableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport {Ownable2StepUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\n/**\\n * @title Blacklistable\\n * @dev Allows accounts to be blacklisted by a \\\"blacklist manager\\\" role\\n * @custom:security-contact dev@solv.finance\\n */\\nabstract contract BlacklistableUpgradeable is Ownable2StepUpgradeable {\\n\\n    /// @custom:storage-location erc7201:solv.storage.Blacklistable\\n    struct BlacklistableStorage {\\n        mapping(address => bool) _blacklisted;\\n        address _blacklistManager;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"solv.storage.Blacklistable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant SolvBTCStorageLocation = 0x37055a6a5ad221b3685065a6f80bdaf8b5de26b2f60e82c3fbc16e3374b00c00;\\n\\n    /**\\n     * @dev Operates by non blacklist manager.\\n     */\\n    error BlacklistableNotManager(address account);\\n\\n    /**\\n     * @dev Account is blacklisted.\\n     */\\n    error BlacklistableBlacklistedAccount(address account);\\n\\n    /**\\n     * @dev Zero address is not allowed.\\n     */\\n    error BlacklistableZeroAddressNotAllowed();\\n\\n    event BlacklistAdded(address indexed account_);\\n    event BlacklistRemoved(address indexed account_);\\n    event BlacklistManagerChanged(address indexed newBlacklistManager);\\n\\n    /**\\n     * @dev Throws if called by any account other than the blacklist manager.\\n     */\\n    modifier onlyBlacklistManager() {\\n        if (msg.sender != blacklistManager()) {\\n            revert BlacklistableNotManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if argument account is blacklisted.\\n     * @param account_ The address to check.\\n     */\\n    modifier notBlacklisted(address account_) {\\n        if (isBlacklisted(account_)) {\\n            revert BlacklistableBlacklistedAccount(account_);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Adds account to blacklist.\\n     * @param account_ The address to blacklist.\\n     */\\n    function addBlacklist(address account_) external onlyBlacklistManager {\\n        _addBlacklist(account_);\\n    }\\n\\n    /**\\n     * @notice Adds multiple accounts to the blacklist.\\n     * @param accounts_ The addresses to blacklist.\\n     */\\n    function addBlacklistBatch(address[] calldata accounts_) external onlyBlacklistManager {\\n        for (uint256 i; i < accounts_.length; ) {\\n            _addBlacklist(accounts_[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes account from blacklist.\\n     * @param account_ The address to remove from the blacklist.\\n     */\\n    function removeBlacklist(address account_) external onlyBlacklistManager {\\n        _removeBlacklist(account_);\\n    }\\n\\n    /**\\n     * @notice Removes multiple accounts from the blacklist.\\n     * @param accounts_ The addresses to remove from the blacklist.\\n     */\\n    function removeBlacklistBatch(address[] calldata accounts_) external onlyBlacklistManager {\\n        for (uint256 i; i < accounts_.length; ) {\\n            _removeBlacklist(accounts_[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the blacklist manager address.\\n     * @param newBlacklistManager_ The address of the new blacklist manager.\\n     */\\n    function updateBlacklistManager(address newBlacklistManager_) external onlyOwner {\\n        if (newBlacklistManager_ == address(0)) {\\n            revert BlacklistableZeroAddressNotAllowed();\\n        }\\n        BlacklistableStorage storage $ = _getBlacklistableStorage();\\n        $._blacklistManager = newBlacklistManager_;\\n        emit BlacklistManagerChanged(newBlacklistManager_);\\n    }\\n\\n    /**\\n     * @notice Checks if account is blacklisted.\\n     * @param account_ The address to check.\\n     * @return True if the account is blacklisted, false if the account is not blacklisted.\\n     */\\n    function isBlacklisted(address account_) public view returns (bool) {\\n        BlacklistableStorage storage $ = _getBlacklistableStorage();\\n        return $._blacklisted[account_];\\n    }\\n\\n    /**\\n     * @notice Get the address of the blacklist manager.\\n     */\\n    function blacklistManager() public view returns (address) {\\n        BlacklistableStorage storage $ = _getBlacklistableStorage();\\n        return $._blacklistManager;\\n    }\\n\\n    function _getBlacklistableStorage() private pure returns (BlacklistableStorage storage $) {\\n        assembly {\\n            $.slot := SolvBTCStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper method that blacklists an account.\\n     * @param account_ The address to blacklist.\\n     */\\n    function _addBlacklist(address account_) private {\\n        if (account_ == address(0)) {\\n            revert BlacklistableZeroAddressNotAllowed();\\n        }\\n        BlacklistableStorage storage $ = _getBlacklistableStorage();\\n        $._blacklisted[account_] = true;\\n        emit BlacklistAdded(account_);\\n    }\\n\\n    /**\\n     * @dev Helper method that unblacklists an account.\\n     * @param account_ The address to unblacklist.\\n     */\\n    function _removeBlacklist(address account_) private {\\n        BlacklistableStorage storage $ = _getBlacklistableStorage();\\n        $._blacklisted[account_] = false;\\n        emit BlacklistRemoved(account_);\\n    }\\n}\\n\",\"keccak256\":\"0x1e37b105c900ce4b0cad56d872aedebd19283b7117324b39f8679523221260c4\",\"license\":\"MIT\"},\"contracts/external/IERC3525.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IERC3525 is IERC721 {\\n    function valueDecimals() external view returns (uint8);\\n    function balanceOf(uint256 tokenId) external view returns (uint256);\\n    function slotOf(uint256 tokenId) external view returns (uint256);\\n    function allowance(uint256 tokenId, address operator) external view returns (uint256);\\n    \\n    function approve(address operator, uint256 tokenId) external payable;\\n    function approve(uint256 tokenId, address operator, uint256 value) external payable;\\n    function transferFrom(uint256 fromTokenId, uint256 toTokenId, uint256 value) external payable;\\n    function transferFrom(uint256 fromTokenId, address to, uint256 value) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a41cdc0d8776a3dacd22983247a662b8a982efa4a7e5c57466de2274fa3d4a7\",\"license\":\"MIT\"},\"contracts/external/IERC3525Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC3525Receiver {\\n    function onERC3525Received(address operator, uint256 fromTokenId, uint256 toTokenId, uint256 value, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x931b362b85b9bc3a3a6fbff54d2f631e3e7f021130717a31947f017ec42b1b08\",\"license\":\"MIT\"},\"contracts/external/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC721 {\\n    function balanceOf(address owner) external view returns (uint256);\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n    function getApproved(uint256 tokenId) external view returns (address);\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function approve(address approved, uint256 tokenId) external payable;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external payable;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x6bfe227558726b5692c09a72a1ad0068fa4fc28bac6cc176937d1e10eaf880c4\",\"license\":\"MIT\"},\"contracts/external/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x1e859773aaf8f8759146ea718f5a7c290b7b0fe9163137738586e1e9c1785923\",\"license\":\"MIT\"},\"contracts/utils/ERC3525TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface ERC721Interface {\\n    function approve(address to, uint256 tokenId) external;\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\\ninterface ERC3525Interface {\\n    function approve(uint256 tokenId, address to, uint256 allowance) external payable;\\n    function transferFrom(uint256 fromTokenId, uint256 toTokenId, uint256 value) external payable;\\n    function transferFrom(uint256 fromTokenId, address to, uint256 value) external payable returns (uint256); \\n}\\n\\nlibrary ERC3525TransferHelper {\\n    function doApproveId(address underlying, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.approve(to, tokenId);\\n    }\\n\\n    function doApproveValue(address underlying, uint256 tokenId, address to, uint256 allowance) internal {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        token.approve(tokenId, to, allowance);\\n    }\\n\\n    function doTransferIn(address underlying, address from, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.transferFrom(from, address(this), tokenId);\\n    }\\n    \\n    function doSafeTransferIn(address underlying, address from, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.safeTransferFrom(from, address(this), tokenId);\\n    }\\n\\n    function doSafeTransferOut(address underlying, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.safeTransferFrom(address(this), to, tokenId);\\n    }\\n\\n    function doTransferOut(address underlying, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.transferFrom(address(this), to, tokenId);\\n    }\\n\\n    function doTransferIn(address underlying, uint256 fromTokenId, uint256 value) internal returns (uint256 newTokenId) {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        return token.transferFrom(fromTokenId, address(this), value);\\n    }\\n\\n    function doTransferOut(address underlying, uint256 fromTokenId, address to, uint256 value) internal returns (uint256 newTokenId) {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        newTokenId = token.transferFrom(fromTokenId, to, value);\\n    }\\n\\n    function doTransfer(address underlying, address from, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.transferFrom(from, to, tokenId);\\n    }\\n\\n    function doTransfer(address underlying, uint256 fromTokenId, uint256 toTokenId, uint256 value) internal {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        token.transferFrom(fromTokenId, toTokenId, value);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7ba67e1347eb1a423a055a27a53488eff24b3b59a6ba84a7e8d0cf36b7c05ec1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c6200002c565b620000266200002c565b620000e0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156200007d5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000dd5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6126f080620000f06000396000f3fe608060405234801561001057600080fd5b50600436106102245760003560e01c80629ce20b1461022957806301ffc9a71461025a57806306fdde031461027d578063077f224a14610292578063095ea7b3146102a7578063150b7a02146102ba57806318160ddd146102cd5780631a026b81146102e357806323b872dd146102fd578063248a9ca3146103105780632d88af4a146103235780632f2ff15d14610336578063313ce5671461034957806336568abe1461035057806338b20518146103635780633f4ba83a1461037657806340c10f191461037e57806342966c681461039157806353d51e64146103a45780635c975abb146103b7578063677f8ac0146103bf57806370a08231146103d2578063715018a6146103e557806371e26e00146103ed57806379ba5097146104005780637adbf97314610408578063833b1fce1461041b5780638456cb59146104305780638da5cb5b1461043857806391d148541461044057806395d89b411461045357806396c495971461045b5780639999416f146104635780639cfe42da146104765780639dc29fac14610489578063a217fddf1461049c578063a49630b2146104a4578063a9059cbb146104ac578063d547741f146104bf578063d9dbf657146104d2578063dd62ed3e146104da578063e30c3978146104ed578063e31c3a90146104f5578063eb91e65114610508578063ef2af9221461051b578063f2fde38b1461052e578063fe575a8714610541575b600080fd5b61023c610237366004611e09565b610554565b6040516001600160e01b031990911681526020015b60405180910390f35b61026d610268366004611e79565b61057a565b6040519015158152602001610251565b6102856105bf565b6040516102519190611ea3565b6102a56102a0366004611f93565b610684565b005b61026d6102b5366004612006565b61079d565b61023c6102c8366004612030565b6107b5565b6102d56107d2565b604051908152602001610251565b6102eb6107e7565b60405160ff9091168152602001610251565b61026d61030b36600461209e565b610862565b6102d561031e3660046120da565b610886565b6102a56103313660046120f3565b6108a6565b6102a561034436600461210e565b6108da565b60126102eb565b6102a561035e36600461210e565b6108fc565b6102a56103713660046120f3565b610934565b6102a56109be565b6102a561038c366004612006565b610a0a565b6102a561039f3660046120da565b610a78565b6102a56103b2366004612006565b610ae2565b61026d610b65565b6102a56103cd36600461213a565b610b7a565b6102d56103e03660046120f3565b610bef565b6102a5610c1a565b6102d56103fb3660046120da565b610c2e565b6102a5610cce565b6102a56104163660046120f3565b610d0a565b610423610dd0565b60405161025191906121a5565b6102a5610deb565b610423610e34565b61026d61044e36600461210e565b610e3f565b610285610e75565b6102d5610eb2565b6102a56104713660046121b9565b610eda565b6102a56104843660046120f3565b610f56565b6102a5610497366004612006565b610f99565b6102d5600081565b6102d5610ffa565b61026d6104ba366004612006565b611009565b6102a56104cd36600461210e565b611017565b610423611033565b6102d56104e836600461222d565b611051565b61042361108d565b6102d56105033660046120da565b611098565b6102a56105163660046120f3565b611146565b6102a56105293660046121b9565b611189565b6102a561053c3660046120f3565b611205565b61026d61054f3660046120f3565b611276565b60003360405163578f385f60e11b815260040161057191906121a5565b60405180910390fd5b60006001600160e01b03198216629ce20b60e01b14806105aa57506001600160e01b03198216630a85bd0160e11b145b806105b957506105b9826112a4565b92915050565b606060006105cb6112d9565b90508060000180546105dc90612257565b90506000036105f3576105ed6112fd565b91505090565b8054819061060090612257565b80601f016020809104026020016040519081016040528092919081815260200182805461062c90612257565b80156106795780601f1061064e57610100808354040283529160200191610679565b820191906000526020600020905b81548152906001019060200180831161065c57829003601f168201915b505050505091505090565b600061068e61131a565b805490915060ff600160401b82041615906001600160401b03166000811580156106b55750825b90506000826001600160401b031660011480156106d15750303b155b9050811580156106df575080155b156106fd5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561072657845460ff60401b1916600160401b1785555b610730888861133e565b610738611350565b61074186611360565b61074c600087611383565b50831561079357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6000336107ab818585611424565b5060019392505050565b600033604051637992d8e360e11b815260040161057191906121a5565b6000806107dd611431565b6002015492915050565b60006107f1610dd0565b6001600160a01b031663ff554afa306040518263ffffffff1660e01b815260040161081c91906121a5565b602060405180830381865afa158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d9190612291565b905090565b600033610870858285611455565b61087b8585856114a2565b506001949350505050565b600080610891611501565b60009384526020525050604090206001015490565b6108ae611525565b60006108b8611557565b80546001600160a01b0319166001600160a01b03939093169290921790915550565b6108e382610886565b6108ec8161157b565b6108f68383611383565b50505050565b6001600160a01b03811633146109255760405163334bd91960e11b815260040160405180910390fd5b61092f8282611585565b505050565b61093c611525565b6001600160a01b038116610963576040516349fe757360e01b815260040160405180910390fd5b600061096d6115fd565b6001810180546001600160a01b0319166001600160a01b038516908117909155604051919250907f5baec8c712a7efe1ef755579f2a5b46fe2ffb57d5d216b746e7130605ee9e97690600090a25050565b60006109c8611557565b80549091506001600160a01b031633146109f7573360405163b2a2046960e01b815260040161057191906121a5565b6109ff611621565b610a07611646565b50565b610a1261169d565b604051602001610a21906122b4565b60405160208183030381529060405280519060200120610a408161157b565b81600003610a615760405163015a4ac960e51b815260040160405180910390fd5b610a6b83836116d3565b50610a74611709565b5050565b610a8061169d565b604051602001610a8f906122b4565b60405160208183030381529060405280519060200120610aae8161157b565b81600003610acf5760405163015a4ac960e51b815260040160405180910390fd5b610ad9338361171a565b50610a07611709565b610aea611525565b610af382611276565b610b12578160405163451aa33d60e01b815260040161057191906121a5565b610b1e82600083611750565b816001600160a01b03167f11d33c4bdbad6892d3d8fe9b29fca9d1701c823ddea540b942b102366a4a47e282604051610b5991815260200190565b60405180910390a25050565b600080610b70611878565b5460ff1692915050565b610b82611525565b6000610b8c6112d9565b905080610b9a858783612329565b5060018101610baa838583612329565b507f841f96fea9cdc9cd8d9e403b87390322f34ff38914b7840853d1f1c9e7d5465085858585604051610be0949392919061240b565b60405180910390a15050505050565b600080610bfa611431565b6001600160a01b0390931660009081526020939093525050604090205490565b610c22611525565b610c2c6000611360565b565b600080610c39610dd0565b6001600160a01b031663fb596008306040518263ffffffff1660e01b8152600401610c6491906121a5565b602060405180830381865afa158015610c81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca5919061243d565b9050610cb36012600a612550565b610cbd828561255f565b610cc79190612576565b9392505050565b3380610cd861108d565b6001600160a01b031614610d01578060405163118cdaa760e01b815260040161057191906121a5565b610a0781611360565b610d12611525565b6001600160a01b038116610d7a5760405162461bcd60e51b815260206004820152602960248201527f536f6c764254435969656c64546f6b656e3a20696e76616c6964206f7261636c60448201526865206164647265737360b81b6064820152608401610571565b6000610d8461189c565b80546001600160a01b0319166001600160a01b0384169081178255604051919250907fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e0803190600090a25050565b600080610ddb61189c565b546001600160a01b031692915050565b6000610df5611557565b80549091506001600160a01b03163314610e24573360405163b2a2046960e01b815260040161057191906121a5565b610e2c6118c0565b610a076118e6565b600080610ddb61192d565b600080610e4a611501565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b60606000610e816112d9565b9050806001018054610e9290612257565b9050600003610ea3576105ed611951565b80600101805461060090612257565b604051602001610ec1906122b4565b6040516020818303038152906040528051906020012081565b610ee2611033565b6001600160a01b0316336001600160a01b031614610f145733604051626c2eb760e01b815260040161057191906121a5565b60005b8181101561092f57610f4e838383818110610f3457610f34612598565b9050602002016020810190610f4991906120f3565b61196e565b600101610f17565b610f5e611033565b6001600160a01b0316336001600160a01b031614610f905733604051626c2eb760e01b815260040161057191906121a5565b610a078161196e565b610fa161169d565b604051602001610fb0906125ae565b60405160208183030381529060405280519060200120610fcf8161157b565b81600003610ff05760405163015a4ac960e51b815260040160405180910390fd5b610a6b838361171a565b604051602001610ec1906125ae565b6000336107ab8185856114a2565b61102082610886565b6110298161157b565b6108f68383611585565b60008061103e6115fd565b600101546001600160a01b031692915050565b60008061105c611431565b6001600160a01b03948516600090815260019190910160209081526040808320959096168252939093525050205490565b600080610ddb6119f1565b6000806110a3610dd0565b6001600160a01b031663fb596008306040518263ffffffff1660e01b81526004016110ce91906121a5565b602060405180830381865afa1580156110eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110f919061243d565b9050801561113d57806111246012600a612550565b61112e908561255f565b6111389190612576565b610cc7565b60009392505050565b61114e611033565b6001600160a01b0316336001600160a01b0316146111805733604051626c2eb760e01b815260040161057191906121a5565b610a0781611a15565b611191611033565b6001600160a01b0316336001600160a01b0316146111c35733604051626c2eb760e01b815260040161057191906121a5565b60005b8181101561092f576111fd8383838181106111e3576111e3612598565b90506020020160208101906111f891906120f3565b611a15565b6001016111c6565b61120d611525565b60006112176119f1565b80546001600160a01b0319166001600160a01b038416908117825590915061123d610e34565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b6000806112816115fd565b6001600160a01b0390931660009081526020939093525050604090205460ff1690565b60006001600160e01b03198216637965db0b60e01b14806105b957506301ffc9a760e01b6001600160e01b03198316146105b9565b7fda2596346793476faa39ef2fc6f6928de90d835de448231a9734d2e32c5b140090565b60606000611309611431565b905080600301805461060090612257565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611346611a6e565b610a748282611a93565b611358611a6e565b610c2c611ac4565b600061136a6119f1565b80546001600160a01b03191681559050610a7482611acc565b60008061138e611501565b905061139a8484610e3f565b61141a576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556113d03390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506105b9565b60009150506105b9565b61092f8383836001611b28565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0090565b60006114618484611051565b905060001981146108f6578181101561149357828183604051637dc7a0d960e11b8152600401610571939291906125cd565b6108f684848484036000611b28565b6001600160a01b0383166114cc576000604051634b637e8f60e11b815260040161057191906121a5565b6001600160a01b0382166114f657600060405163ec442f0560e01b815260040161057191906121a5565b61092f838383611b34565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b3361152e610e34565b6001600160a01b031614610c2c573360405163118cdaa760e01b815260040161057191906121a5565b7f502a85c8d631e3586414f9cb06ca4d27c03b5f40bf43ea12a9183dd747be590090565b610a078133611b3f565b600080611590611501565b905061159c8484610e3f565b1561141a576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506105b9565b7f37055a6a5ad221b3685065a6f80bdaf8b5de26b2f60e82c3fbc16e3374b00c0090565b611629610b65565b610c2c57604051638dfc202b60e01b815260040160405180910390fd5b61164e611621565b6000611658611878565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161169291906121a5565b60405180910390a150565b60006116a7611b78565b8054909150600119016116cd57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6001600160a01b0382166116fd57600060405163ec442f0560e01b815260040161057191906121a5565b610a7460008383611b34565b6000611713611b78565b6001905550565b6001600160a01b038216611744576000604051634b637e8f60e11b815260040161057191906121a5565b610a7482600083611b34565b600061175a611431565b90506001600160a01b038416611789578181600201600082825461177e91906125ee565b909155506117e89050565b6001600160a01b038416600090815260208290526040902054828110156117c95784818460405163391434e360e21b8152600401610571939291906125cd565b6001600160a01b03851660009081526020839052604090209083900390555b6001600160a01b038316611806576002810180548390039055611825565b6001600160a01b03831660009081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161186a91815260200190565b60405180910390a350505050565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b7ff05073905b1e64f5ceda3673d2f3281ec4d80a5b81532923554d53221166150090565b6118c8610b65565b15610c2c5760405163d93c066560e01b815260040160405180910390fd5b6118ee6118c0565b60006118f8611878565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116853390565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930090565b6060600061195d611431565b905080600401805461060090612257565b6001600160a01b038116611995576040516349fe757360e01b815260040160405180910390fd5b600061199f6115fd565b6001600160a01b038316600081815260208390526040808220805460ff191660011790555192935090917f44d5fe68b00f68950fb9c1ff0a61ef7f747b1a36359a7e3a7f3324db4b8789679190a25050565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0090565b6000611a1f6115fd565b6001600160a01b038316600081815260208390526040808220805460ff191690555192935090917f1747ca720b1a174a464b6513ace29b1d3190b5f632b9f34147017c81425bfde89190a25050565b611a76611b9c565b610c2c57604051631afcd79f60e31b815260040160405180910390fd5b611a9b611a6e565b6000611aa5611431565b905060038101611ab58482612601565b50600481016108f68382612601565b611709611a6e565b6000611ad661192d565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6108f684848484611bb6565b61092f838383611c1e565b611b498282610e3f565b610a745760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610571565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b6000611ba661131a565b54600160401b900460ff16919050565b82611bc081611276565b15611be0578060405163bb70159d60e01b815260040161057191906121a5565b84611bea81611276565b15611c0a578060405163bb70159d60e01b815260040161057191906121a5565b611c1686868686611c31565b505050505050565b611c266118c0565b61092f838383611d16565b6000611c3b611431565b90506001600160a01b038516611c6757600060405163e602df0560e01b815260040161057191906121a5565b6001600160a01b038416611c91576000604051634a1406b160e11b815260040161057191906121a5565b6001600160a01b03808616600090815260018301602090815260408083209388168352929052208390558115611d0f57836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92585604051611d0691815260200190565b60405180910390a35b5050505050565b61092f83838382611d2681611276565b15611d46578060405163bb70159d60e01b815260040161057191906121a5565b82611d5081611276565b15611d70578060405163bb70159d60e01b815260040161057191906121a5565b33611d7a81611276565b15611d9a578060405163bb70159d60e01b815260040161057191906121a5565b611c16868686611750565b80356001600160a01b0381168114611dbc57600080fd5b919050565b60008083601f840112611dd357600080fd5b5081356001600160401b03811115611dea57600080fd5b602083019150836020828501011115611e0257600080fd5b9250929050565b60008060008060008060a08789031215611e2257600080fd5b611e2b87611da5565b955060208701359450604087013593506060870135925060808701356001600160401b03811115611e5b57600080fd5b611e6789828a01611dc1565b979a9699509497509295939492505050565b600060208284031215611e8b57600080fd5b81356001600160e01b031981168114610cc757600080fd5b600060208083528351808285015260005b81811015611ed057858101830151858201604001528201611eb4565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611f1857600080fd5b81356001600160401b0380821115611f3257611f32611ef1565b604051601f8301601f19908116603f01168101908282118183101715611f5a57611f5a611ef1565b81604052838152866020858801011115611f7357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215611fa857600080fd5b83356001600160401b0380821115611fbf57600080fd5b611fcb87838801611f07565b94506020860135915080821115611fe157600080fd5b50611fee86828701611f07565b925050611ffd60408501611da5565b90509250925092565b6000806040838503121561201957600080fd5b61202283611da5565b946020939093013593505050565b60008060008060006080868803121561204857600080fd5b61205186611da5565b945061205f60208701611da5565b93506040860135925060608601356001600160401b0381111561208157600080fd5b61208d88828901611dc1565b969995985093965092949392505050565b6000806000606084860312156120b357600080fd5b6120bc84611da5565b92506120ca60208501611da5565b9150604084013590509250925092565b6000602082840312156120ec57600080fd5b5035919050565b60006020828403121561210557600080fd5b610cc782611da5565b6000806040838503121561212157600080fd5b8235915061213160208401611da5565b90509250929050565b6000806000806040858703121561215057600080fd5b84356001600160401b038082111561216757600080fd5b61217388838901611dc1565b9096509450602087013591508082111561218c57600080fd5b5061219987828801611dc1565b95989497509550505050565b6001600160a01b0391909116815260200190565b600080602083850312156121cc57600080fd5b82356001600160401b03808211156121e357600080fd5b818501915085601f8301126121f757600080fd5b81358181111561220657600080fd5b8660208260051b850101111561221b57600080fd5b60209290920196919550909350505050565b6000806040838503121561224057600080fd5b61224983611da5565b915061213160208401611da5565b600181811c9082168061226b57607f821691505b60208210810361228b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156122a357600080fd5b815160ff81168114610cc757600080fd5b6d29a7a62b212a21afa6a4a72a22a960911b8152600e0190565b601f82111561092f57600081815260208120601f850160051c810160208610156122f55750805b601f850160051c820191505b81811015611c1657828155600101612301565b600019600383901b1c191660019190911b1790565b6001600160401b0383111561234057612340611ef1565b6123548361234e8354612257565b836122ce565b6000601f84116001811461238257600085156123705750838201355b61237a8682612314565b845550611d0f565b600083815260209020601f19861690835b828110156123b35786850135825560209485019460019092019101612393565b50868210156123d05760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061241f6040830186886123e2565b82810360208401526124328185876123e2565b979650505050505050565b60006020828403121561244f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156124a757816000190482111561248d5761248d612456565b8085161561249a57918102915b93841c9390800290612471565b509250929050565b6000826124be575060016105b9565b816124cb575060006105b9565b81600181146124e157600281146124eb57612507565b60019150506105b9565b60ff8411156124fc576124fc612456565b50506001821b6105b9565b5060208310610133831016604e8410600b841016171561252a575081810a6105b9565b612534838361246c565b806000190482111561254857612548612456565b029392505050565b6000610cc760ff8416836124af565b80820281158282048414176105b9576105b9612456565b60008261259357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b7229a7a62b212a21afa827a7a62fa12aa92722a960691b815260130190565b6001600160a01b039390931683526020830191909152604082015260600190565b808201808211156105b9576105b9612456565b81516001600160401b0381111561261a5761261a611ef1565b61262e816126288454612257565b846122ce565b602080601f83116001811461265d576000841561264b5750858301515b6126558582612314565b865550611c16565b600085815260208120601f198616915b8281101561268c5788860151825594840194600190910190840161266d565b50858210156126aa5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212201603589dbe112607ec74988201b4e366e9def3b60af01b00c8ca80f4b9abbba564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102245760003560e01c80629ce20b1461022957806301ffc9a71461025a57806306fdde031461027d578063077f224a14610292578063095ea7b3146102a7578063150b7a02146102ba57806318160ddd146102cd5780631a026b81146102e357806323b872dd146102fd578063248a9ca3146103105780632d88af4a146103235780632f2ff15d14610336578063313ce5671461034957806336568abe1461035057806338b20518146103635780633f4ba83a1461037657806340c10f191461037e57806342966c681461039157806353d51e64146103a45780635c975abb146103b7578063677f8ac0146103bf57806370a08231146103d2578063715018a6146103e557806371e26e00146103ed57806379ba5097146104005780637adbf97314610408578063833b1fce1461041b5780638456cb59146104305780638da5cb5b1461043857806391d148541461044057806395d89b411461045357806396c495971461045b5780639999416f146104635780639cfe42da146104765780639dc29fac14610489578063a217fddf1461049c578063a49630b2146104a4578063a9059cbb146104ac578063d547741f146104bf578063d9dbf657146104d2578063dd62ed3e146104da578063e30c3978146104ed578063e31c3a90146104f5578063eb91e65114610508578063ef2af9221461051b578063f2fde38b1461052e578063fe575a8714610541575b600080fd5b61023c610237366004611e09565b610554565b6040516001600160e01b031990911681526020015b60405180910390f35b61026d610268366004611e79565b61057a565b6040519015158152602001610251565b6102856105bf565b6040516102519190611ea3565b6102a56102a0366004611f93565b610684565b005b61026d6102b5366004612006565b61079d565b61023c6102c8366004612030565b6107b5565b6102d56107d2565b604051908152602001610251565b6102eb6107e7565b60405160ff9091168152602001610251565b61026d61030b36600461209e565b610862565b6102d561031e3660046120da565b610886565b6102a56103313660046120f3565b6108a6565b6102a561034436600461210e565b6108da565b60126102eb565b6102a561035e36600461210e565b6108fc565b6102a56103713660046120f3565b610934565b6102a56109be565b6102a561038c366004612006565b610a0a565b6102a561039f3660046120da565b610a78565b6102a56103b2366004612006565b610ae2565b61026d610b65565b6102a56103cd36600461213a565b610b7a565b6102d56103e03660046120f3565b610bef565b6102a5610c1a565b6102d56103fb3660046120da565b610c2e565b6102a5610cce565b6102a56104163660046120f3565b610d0a565b610423610dd0565b60405161025191906121a5565b6102a5610deb565b610423610e34565b61026d61044e36600461210e565b610e3f565b610285610e75565b6102d5610eb2565b6102a56104713660046121b9565b610eda565b6102a56104843660046120f3565b610f56565b6102a5610497366004612006565b610f99565b6102d5600081565b6102d5610ffa565b61026d6104ba366004612006565b611009565b6102a56104cd36600461210e565b611017565b610423611033565b6102d56104e836600461222d565b611051565b61042361108d565b6102d56105033660046120da565b611098565b6102a56105163660046120f3565b611146565b6102a56105293660046121b9565b611189565b6102a561053c3660046120f3565b611205565b61026d61054f3660046120f3565b611276565b60003360405163578f385f60e11b815260040161057191906121a5565b60405180910390fd5b60006001600160e01b03198216629ce20b60e01b14806105aa57506001600160e01b03198216630a85bd0160e11b145b806105b957506105b9826112a4565b92915050565b606060006105cb6112d9565b90508060000180546105dc90612257565b90506000036105f3576105ed6112fd565b91505090565b8054819061060090612257565b80601f016020809104026020016040519081016040528092919081815260200182805461062c90612257565b80156106795780601f1061064e57610100808354040283529160200191610679565b820191906000526020600020905b81548152906001019060200180831161065c57829003601f168201915b505050505091505090565b600061068e61131a565b805490915060ff600160401b82041615906001600160401b03166000811580156106b55750825b90506000826001600160401b031660011480156106d15750303b155b9050811580156106df575080155b156106fd5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561072657845460ff60401b1916600160401b1785555b610730888861133e565b610738611350565b61074186611360565b61074c600087611383565b50831561079357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6000336107ab818585611424565b5060019392505050565b600033604051637992d8e360e11b815260040161057191906121a5565b6000806107dd611431565b6002015492915050565b60006107f1610dd0565b6001600160a01b031663ff554afa306040518263ffffffff1660e01b815260040161081c91906121a5565b602060405180830381865afa158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d9190612291565b905090565b600033610870858285611455565b61087b8585856114a2565b506001949350505050565b600080610891611501565b60009384526020525050604090206001015490565b6108ae611525565b60006108b8611557565b80546001600160a01b0319166001600160a01b03939093169290921790915550565b6108e382610886565b6108ec8161157b565b6108f68383611383565b50505050565b6001600160a01b03811633146109255760405163334bd91960e11b815260040160405180910390fd5b61092f8282611585565b505050565b61093c611525565b6001600160a01b038116610963576040516349fe757360e01b815260040160405180910390fd5b600061096d6115fd565b6001810180546001600160a01b0319166001600160a01b038516908117909155604051919250907f5baec8c712a7efe1ef755579f2a5b46fe2ffb57d5d216b746e7130605ee9e97690600090a25050565b60006109c8611557565b80549091506001600160a01b031633146109f7573360405163b2a2046960e01b815260040161057191906121a5565b6109ff611621565b610a07611646565b50565b610a1261169d565b604051602001610a21906122b4565b60405160208183030381529060405280519060200120610a408161157b565b81600003610a615760405163015a4ac960e51b815260040160405180910390fd5b610a6b83836116d3565b50610a74611709565b5050565b610a8061169d565b604051602001610a8f906122b4565b60405160208183030381529060405280519060200120610aae8161157b565b81600003610acf5760405163015a4ac960e51b815260040160405180910390fd5b610ad9338361171a565b50610a07611709565b610aea611525565b610af382611276565b610b12578160405163451aa33d60e01b815260040161057191906121a5565b610b1e82600083611750565b816001600160a01b03167f11d33c4bdbad6892d3d8fe9b29fca9d1701c823ddea540b942b102366a4a47e282604051610b5991815260200190565b60405180910390a25050565b600080610b70611878565b5460ff1692915050565b610b82611525565b6000610b8c6112d9565b905080610b9a858783612329565b5060018101610baa838583612329565b507f841f96fea9cdc9cd8d9e403b87390322f34ff38914b7840853d1f1c9e7d5465085858585604051610be0949392919061240b565b60405180910390a15050505050565b600080610bfa611431565b6001600160a01b0390931660009081526020939093525050604090205490565b610c22611525565b610c2c6000611360565b565b600080610c39610dd0565b6001600160a01b031663fb596008306040518263ffffffff1660e01b8152600401610c6491906121a5565b602060405180830381865afa158015610c81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca5919061243d565b9050610cb36012600a612550565b610cbd828561255f565b610cc79190612576565b9392505050565b3380610cd861108d565b6001600160a01b031614610d01578060405163118cdaa760e01b815260040161057191906121a5565b610a0781611360565b610d12611525565b6001600160a01b038116610d7a5760405162461bcd60e51b815260206004820152602960248201527f536f6c764254435969656c64546f6b656e3a20696e76616c6964206f7261636c60448201526865206164647265737360b81b6064820152608401610571565b6000610d8461189c565b80546001600160a01b0319166001600160a01b0384169081178255604051919250907fd3b5d1e0ffaeff528910f3663f0adace7694ab8241d58e17a91351ced2e0803190600090a25050565b600080610ddb61189c565b546001600160a01b031692915050565b6000610df5611557565b80549091506001600160a01b03163314610e24573360405163b2a2046960e01b815260040161057191906121a5565b610e2c6118c0565b610a076118e6565b600080610ddb61192d565b600080610e4a611501565b6000948552602090815260408086206001600160a01b03959095168652939052505090205460ff1690565b60606000610e816112d9565b9050806001018054610e9290612257565b9050600003610ea3576105ed611951565b80600101805461060090612257565b604051602001610ec1906122b4565b6040516020818303038152906040528051906020012081565b610ee2611033565b6001600160a01b0316336001600160a01b031614610f145733604051626c2eb760e01b815260040161057191906121a5565b60005b8181101561092f57610f4e838383818110610f3457610f34612598565b9050602002016020810190610f4991906120f3565b61196e565b600101610f17565b610f5e611033565b6001600160a01b0316336001600160a01b031614610f905733604051626c2eb760e01b815260040161057191906121a5565b610a078161196e565b610fa161169d565b604051602001610fb0906125ae565b60405160208183030381529060405280519060200120610fcf8161157b565b81600003610ff05760405163015a4ac960e51b815260040160405180910390fd5b610a6b838361171a565b604051602001610ec1906125ae565b6000336107ab8185856114a2565b61102082610886565b6110298161157b565b6108f68383611585565b60008061103e6115fd565b600101546001600160a01b031692915050565b60008061105c611431565b6001600160a01b03948516600090815260019190910160209081526040808320959096168252939093525050205490565b600080610ddb6119f1565b6000806110a3610dd0565b6001600160a01b031663fb596008306040518263ffffffff1660e01b81526004016110ce91906121a5565b602060405180830381865afa1580156110eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110f919061243d565b9050801561113d57806111246012600a612550565b61112e908561255f565b6111389190612576565b610cc7565b60009392505050565b61114e611033565b6001600160a01b0316336001600160a01b0316146111805733604051626c2eb760e01b815260040161057191906121a5565b610a0781611a15565b611191611033565b6001600160a01b0316336001600160a01b0316146111c35733604051626c2eb760e01b815260040161057191906121a5565b60005b8181101561092f576111fd8383838181106111e3576111e3612598565b90506020020160208101906111f891906120f3565b611a15565b6001016111c6565b61120d611525565b60006112176119f1565b80546001600160a01b0319166001600160a01b038416908117825590915061123d610e34565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b6000806112816115fd565b6001600160a01b0390931660009081526020939093525050604090205460ff1690565b60006001600160e01b03198216637965db0b60e01b14806105b957506301ffc9a760e01b6001600160e01b03198316146105b9565b7fda2596346793476faa39ef2fc6f6928de90d835de448231a9734d2e32c5b140090565b60606000611309611431565b905080600301805461060090612257565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611346611a6e565b610a748282611a93565b611358611a6e565b610c2c611ac4565b600061136a6119f1565b80546001600160a01b03191681559050610a7482611acc565b60008061138e611501565b905061139a8484610e3f565b61141a576000848152602082815260408083206001600160a01b03871684529091529020805460ff191660011790556113d03390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506105b9565b60009150506105b9565b61092f8383836001611b28565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0090565b60006114618484611051565b905060001981146108f6578181101561149357828183604051637dc7a0d960e11b8152600401610571939291906125cd565b6108f684848484036000611b28565b6001600160a01b0383166114cc576000604051634b637e8f60e11b815260040161057191906121a5565b6001600160a01b0382166114f657600060405163ec442f0560e01b815260040161057191906121a5565b61092f838383611b34565b7f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680090565b3361152e610e34565b6001600160a01b031614610c2c573360405163118cdaa760e01b815260040161057191906121a5565b7f502a85c8d631e3586414f9cb06ca4d27c03b5f40bf43ea12a9183dd747be590090565b610a078133611b3f565b600080611590611501565b905061159c8484610e3f565b1561141a576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506105b9565b7f37055a6a5ad221b3685065a6f80bdaf8b5de26b2f60e82c3fbc16e3374b00c0090565b611629610b65565b610c2c57604051638dfc202b60e01b815260040160405180910390fd5b61164e611621565b6000611658611878565b805460ff1916815590507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161169291906121a5565b60405180910390a150565b60006116a7611b78565b8054909150600119016116cd57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6001600160a01b0382166116fd57600060405163ec442f0560e01b815260040161057191906121a5565b610a7460008383611b34565b6000611713611b78565b6001905550565b6001600160a01b038216611744576000604051634b637e8f60e11b815260040161057191906121a5565b610a7482600083611b34565b600061175a611431565b90506001600160a01b038416611789578181600201600082825461177e91906125ee565b909155506117e89050565b6001600160a01b038416600090815260208290526040902054828110156117c95784818460405163391434e360e21b8152600401610571939291906125cd565b6001600160a01b03851660009081526020839052604090209083900390555b6001600160a01b038316611806576002810180548390039055611825565b6001600160a01b03831660009081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161186a91815260200190565b60405180910390a350505050565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b7ff05073905b1e64f5ceda3673d2f3281ec4d80a5b81532923554d53221166150090565b6118c8610b65565b15610c2c5760405163d93c066560e01b815260040160405180910390fd5b6118ee6118c0565b60006118f8611878565b805460ff1916600117815590507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116853390565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930090565b6060600061195d611431565b905080600401805461060090612257565b6001600160a01b038116611995576040516349fe757360e01b815260040160405180910390fd5b600061199f6115fd565b6001600160a01b038316600081815260208390526040808220805460ff191660011790555192935090917f44d5fe68b00f68950fb9c1ff0a61ef7f747b1a36359a7e3a7f3324db4b8789679190a25050565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0090565b6000611a1f6115fd565b6001600160a01b038316600081815260208390526040808220805460ff191690555192935090917f1747ca720b1a174a464b6513ace29b1d3190b5f632b9f34147017c81425bfde89190a25050565b611a76611b9c565b610c2c57604051631afcd79f60e31b815260040160405180910390fd5b611a9b611a6e565b6000611aa5611431565b905060038101611ab58482612601565b50600481016108f68382612601565b611709611a6e565b6000611ad661192d565b80546001600160a01b038481166001600160a01b031983168117845560405193945091169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6108f684848484611bb6565b61092f838383611c1e565b611b498282610e3f565b610a745760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610571565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b6000611ba661131a565b54600160401b900460ff16919050565b82611bc081611276565b15611be0578060405163bb70159d60e01b815260040161057191906121a5565b84611bea81611276565b15611c0a578060405163bb70159d60e01b815260040161057191906121a5565b611c1686868686611c31565b505050505050565b611c266118c0565b61092f838383611d16565b6000611c3b611431565b90506001600160a01b038516611c6757600060405163e602df0560e01b815260040161057191906121a5565b6001600160a01b038416611c91576000604051634a1406b160e11b815260040161057191906121a5565b6001600160a01b03808616600090815260018301602090815260408083209388168352929052208390558115611d0f57836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92585604051611d0691815260200190565b60405180910390a35b5050505050565b61092f83838382611d2681611276565b15611d46578060405163bb70159d60e01b815260040161057191906121a5565b82611d5081611276565b15611d70578060405163bb70159d60e01b815260040161057191906121a5565b33611d7a81611276565b15611d9a578060405163bb70159d60e01b815260040161057191906121a5565b611c16868686611750565b80356001600160a01b0381168114611dbc57600080fd5b919050565b60008083601f840112611dd357600080fd5b5081356001600160401b03811115611dea57600080fd5b602083019150836020828501011115611e0257600080fd5b9250929050565b60008060008060008060a08789031215611e2257600080fd5b611e2b87611da5565b955060208701359450604087013593506060870135925060808701356001600160401b03811115611e5b57600080fd5b611e6789828a01611dc1565b979a9699509497509295939492505050565b600060208284031215611e8b57600080fd5b81356001600160e01b031981168114610cc757600080fd5b600060208083528351808285015260005b81811015611ed057858101830151858201604001528201611eb4565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611f1857600080fd5b81356001600160401b0380821115611f3257611f32611ef1565b604051601f8301601f19908116603f01168101908282118183101715611f5a57611f5a611ef1565b81604052838152866020858801011115611f7357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215611fa857600080fd5b83356001600160401b0380821115611fbf57600080fd5b611fcb87838801611f07565b94506020860135915080821115611fe157600080fd5b50611fee86828701611f07565b925050611ffd60408501611da5565b90509250925092565b6000806040838503121561201957600080fd5b61202283611da5565b946020939093013593505050565b60008060008060006080868803121561204857600080fd5b61205186611da5565b945061205f60208701611da5565b93506040860135925060608601356001600160401b0381111561208157600080fd5b61208d88828901611dc1565b969995985093965092949392505050565b6000806000606084860312156120b357600080fd5b6120bc84611da5565b92506120ca60208501611da5565b9150604084013590509250925092565b6000602082840312156120ec57600080fd5b5035919050565b60006020828403121561210557600080fd5b610cc782611da5565b6000806040838503121561212157600080fd5b8235915061213160208401611da5565b90509250929050565b6000806000806040858703121561215057600080fd5b84356001600160401b038082111561216757600080fd5b61217388838901611dc1565b9096509450602087013591508082111561218c57600080fd5b5061219987828801611dc1565b95989497509550505050565b6001600160a01b0391909116815260200190565b600080602083850312156121cc57600080fd5b82356001600160401b03808211156121e357600080fd5b818501915085601f8301126121f757600080fd5b81358181111561220657600080fd5b8660208260051b850101111561221b57600080fd5b60209290920196919550909350505050565b6000806040838503121561224057600080fd5b61224983611da5565b915061213160208401611da5565b600181811c9082168061226b57607f821691505b60208210810361228b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156122a357600080fd5b815160ff81168114610cc757600080fd5b6d29a7a62b212a21afa6a4a72a22a960911b8152600e0190565b601f82111561092f57600081815260208120601f850160051c810160208610156122f55750805b601f850160051c820191505b81811015611c1657828155600101612301565b600019600383901b1c191660019190911b1790565b6001600160401b0383111561234057612340611ef1565b6123548361234e8354612257565b836122ce565b6000601f84116001811461238257600085156123705750838201355b61237a8682612314565b845550611d0f565b600083815260209020601f19861690835b828110156123b35786850135825560209485019460019092019101612393565b50868210156123d05760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061241f6040830186886123e2565b82810360208401526124328185876123e2565b979650505050505050565b60006020828403121561244f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156124a757816000190482111561248d5761248d612456565b8085161561249a57918102915b93841c9390800290612471565b509250929050565b6000826124be575060016105b9565b816124cb575060006105b9565b81600181146124e157600281146124eb57612507565b60019150506105b9565b60ff8411156124fc576124fc612456565b50506001821b6105b9565b5060208310610133831016604e8410600b841016171561252a575081810a6105b9565b612534838361246c565b806000190482111561254857612548612456565b029392505050565b6000610cc760ff8416836124af565b80820281158282048414176105b9576105b9612456565b60008261259357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b7229a7a62b212a21afa827a7a62fa12aa92722a960691b815260130190565b6001600160a01b039390931683526020830191909152604082015260600190565b808201808211156105b9576105b9612456565b81516001600160401b0381111561261a5761261a611ef1565b61262e816126288454612257565b846122ce565b602080601f83116001811461265d576000841561264b5750858301515b6126558582612314565b865550611c16565b600085815260208120601f198616915b8281101561268c5788860151825594840194600190910190840161266d565b50858210156126aa5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212201603589dbe112607ec74988201b4e366e9def3b60af01b00c8ca80f4b9abbba564736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "BlacklistableBlacklistedAccount(address)": [
        {
          "details": "Account is blacklisted."
        }
      ],
      "BlacklistableNotManager(address)": [
        {
          "details": "Operates by non blacklist manager."
        }
      ],
      "BlacklistableZeroAddressNotAllowed()": [
        {
          "details": "Zero address is not allowed."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "PausablePauser(address)": [
        {
          "details": "Operates by non pauser."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SolvBTCNotBlacklisted(address)": [
        {
          "details": "Account is not blacklisted."
        }
      ],
      "SolvBTCZeroValueNotAllowed()": [
        {
          "details": "Mint or burn zero value is not allowed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addBlacklist(address)": {
        "params": {
          "account_": "The address to blacklist."
        }
      },
      "addBlacklistBatch(address[])": {
        "params": {
          "accounts_": "The addresses to blacklist."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isBlacklisted(address)": {
        "params": {
          "account_": "The address to check."
        },
        "returns": {
          "_0": "True if the account is blacklisted, false if the account is not blacklisted."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "onERC3525Received(address,uint256,uint256,uint256,bytes)": {
        "details": "Deprecated function inherited from SolvBTC V2, since the values of deprecated variables have been cleared, this function would be deleted from V2.1."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "removeBlacklist(address)": {
        "params": {
          "account_": "The address to remove from the blacklist."
        }
      },
      "removeBlacklistBatch(address[])": {
        "params": {
          "accounts_": "The addresses to remove from the blacklist."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAlias(string,string)": {
        "details": "Sets the alias name and symbol of the SolvBTC yield token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "updateBlacklistManager(address)": {
        "params": {
          "newBlacklistManager_": "The address of the new blacklist manager."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DestroyBlackFunds(address,uint256)": {
        "notice": "Emitted when black funds are destroyed."
      }
    },
    "kind": "user",
    "methods": {
      "SOLVBTC_MINTER_ROLE()": {
        "notice": "`SOLVBTC_MINTER` role is allowed to mint SolvBTC tokens, as well as to burn SolvBTC tokens held by itself."
      },
      "SOLVBTC_POOL_BURNER_ROLE()": {
        "notice": "`SOLVBTC_POOL_BURNER` role is allowed to burn SolvBTC tokens from other accounts only when necessary."
      },
      "addBlacklist(address)": {
        "notice": "Adds account to blacklist."
      },
      "addBlacklistBatch(address[])": {
        "notice": "Adds multiple accounts to the blacklist."
      },
      "blacklistManager()": {
        "notice": "Get the address of the blacklist manager."
      },
      "destroyBlackFunds(address,uint256)": {
        "notice": "Destroys black funds from the specified blacklist account."
      },
      "getSharesByValue(uint256)": {
        "notice": "Get amount of shares for a given amount of underlying asset."
      },
      "getValueByShares(uint256)": {
        "notice": "Get amount of underlying asset for a given amount of shares."
      },
      "isBlacklisted(address)": {
        "notice": "Checks if account is blacklisted."
      },
      "removeBlacklist(address)": {
        "notice": "Removes account from blacklist."
      },
      "removeBlacklistBatch(address[])": {
        "notice": "Removes multiple accounts from the blacklist."
      },
      "updateBlacklistManager(address)": {
        "notice": "Updates the blacklist manager address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}