{
  "address": "0x9D57fC91861e20404085BB2DCE912ccF876beC61",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrapToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "solvBTC_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "solvBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xba36dd7fef9c2ce420f6d6264bd5ef592ad0f2fc999835c3f3ca7878378f1d1c",
  "receipt": {
    "to": null,
    "from": "0x2B16D65109F178ad5243C1f3D4683aaC62eFc41c",
    "contractAddress": "0x9D57fC91861e20404085BB2DCE912ccF876beC61",
    "transactionIndex": 1,
    "gasUsed": "467056",
    "logsBloom": "0x
    "blockHash": "0xc71688bbcc990315e79d1bdb9b637a4a8cc8f88bb4ed6845cc2473334077632e",
    "transactionHash": "0xba36dd7fef9c2ce420f6d6264bd5ef592ad0f2fc999835c3f3ca7878378f1d1c",
    "logs": [],
    "blockNumber": 7357484,
    "cumulativeGasUsed": "497657",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc3ab400cfa0183c319081ddd2af489e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solvBTC_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solvBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NativeDeposit.sol\":\"NativeDeposit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/ISftWrapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./external/IERC721Receiver.sol\\\";\\nimport \\\"./external/IERC3525Receiver.sol\\\";\\n\\ninterface ISftWrapRouter is IERC721Receiver, IERC3525Receiver, IERC165 {\\n}\",\"keccak256\":\"0x817274c7ea02d3be73c56efd9c1dc73a0ebcd335eb9490c385b07fd1905cbcdb\",\"license\":\"MIT\"},\"contracts/ISolvBTCMultiAssetPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface ISolvBTCMultiAssetPool {\\n    function deposit(address sft_, uint256 sftId_, uint256 value_) external;\\n    function withdraw(address sft, uint256 slot, uint256 sftId, uint256 value) external returns (uint256 toSftId_);\\n\\n    function isSftSlotDepositAllowed(address sft_, uint256 slot_) external view returns (bool);\\n    function isSftSlotWithdrawAllowed(address sft_, uint256 slot_) external view returns (bool);\\n    function getERC20(address sft_, uint256 slot_) external view returns (address);\\n    function getHoldingValueSftId(address sft_, uint256 slot_) external view returns (uint256);\\n    function getSftSlotBalance(address sft_, uint256 slot_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e4a30dbc2a3fa311bb7148ab28d3f71310358c667aa665d5428f50b2d603cf2\",\"license\":\"MIT\"},\"contracts/NativeDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {SolvBTCRouter} from \\\"./SolvBTCRouter.sol\\\";\\n\\ninterface IWrapToken is IERC20 {\\n    function deposit(uint256 amount) external payable;\\n}\\n\\ncontract NativeDeposit is ReentrancyGuardUpgradeable {\\n\\n    address public wrapToken;\\n    address public solvBTC;\\n    address public router;\\n\\n    event Deposit(bytes32 indexed poolId, address indexed sender, uint256 amountIn, uint256 amountOut);\\n\\n    function initialize(address wrapToken_, address solvBTC_, address router_) external initializer {\\n        __ReentrancyGuard_init();\\n\\n        require(wrapToken_ != address(0), \\\"invalid wrapToken\\\");\\n        require(solvBTC_ != address(0), \\\"invalid solvBTC\\\");\\n        require(router_ != address(0), \\\"invalid router\\\");\\n\\n        wrapToken = wrapToken_;\\n        solvBTC = solvBTC_;\\n        router = router_;\\n    }\\n\\n    function deposit(bytes32 poolId_, uint256 amountIn_) external nonReentrant payable returns (uint256 amountOut_) {\\n        require(msg.value == amountIn_, \\\"incorrect amount\\\");\\n        IWrapToken(wrapToken).deposit{value: amountIn_}(amountIn_);\\n        IWrapToken(wrapToken).approve(router, amountIn_);\\n        amountOut_ = SolvBTCRouter(router).createSubscription(poolId_, amountIn_);\\n        IERC20(solvBTC).transfer(msg.sender, amountOut_);\\n        emit Deposit(poolId_, msg.sender, amountIn_, amountOut_);\\n    }\\n\\n}\",\"keccak256\":\"0x7570ad4ee1bde315ca2f59bb8b019de03ee7fc800482c2d3f37e4151f34baf3d\",\"license\":\"MIT\"},\"contracts/SolvBTCRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./access/AdminControlUpgradeable.sol\\\";\\nimport \\\"./access/GovernorControlUpgradeable.sol\\\";\\nimport \\\"./utils/ERC20TransferHelper.sol\\\";\\nimport \\\"./utils/ERC3525TransferHelper.sol\\\";\\nimport \\\"./external/IERC3525.sol\\\";\\nimport \\\"./external/IOpenFundMarket.sol\\\";\\nimport \\\"./ISftWrapRouter.sol\\\";\\nimport \\\"./ISolvBTCMultiAssetPool.sol\\\";\\n\\ncontract SolvBTCRouter is\\n    ISftWrapRouter,\\n    ReentrancyGuardUpgradeable,\\n    AdminControlUpgradeable,\\n    GovernorControlUpgradeable\\n{\\n    event Stake(\\n        address indexed solvBTC, address indexed staker, address sft, uint256 sftSlot, uint256 sftId, uint256 amount\\n    );\\n    event Unstake(\\n        address indexed solvBTC, address indexed unstaker, address sft, uint256 sftSlot, uint256 sftId, uint256 amount\\n    );\\n    event CreateSubscription(\\n        bytes32 indexed poolId,\\n        address indexed subscriber,\\n        address solvBTC,\\n        uint256 subscribeAmount,\\n        address currency,\\n        uint256 currencyAmount\\n    );\\n    event CreateRedemption(\\n        bytes32 indexed poolId,\\n        address indexed redeemer,\\n        address indexed solvBTC,\\n        uint256 redeemAmount,\\n        uint256 redemptionId\\n    );\\n    event CancelRedemption(\\n        bytes32 indexed poolId,\\n        address indexed owner,\\n        address indexed solvBTC,\\n        uint256 redemptionId,\\n        uint256 cancelAmount\\n    );\\n    event SetOpenFundMarket(address indexed previousOpenFundMarket, address indexed newOpenFundMarket);\\n    event SetSolvBTCMultiAssetPool(\\n        address indexed previousSolvBTCMultiAssetPool, address indexed newSolvBTCMultiAssetPool\\n    );\\n\\n    address public openFundMarket;\\n    address public solvBTCMultiAssetPool;\\n\\n    // sft address => sft slot => holding sft id\\n    mapping(address => mapping(uint256 => uint256)) public holdingSftIds;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address governor_, address openFundMarket_, address solvBTCMultiAssetPool_)\\n        external\\n        initializer\\n    {\\n        require(governor_ != address(0), \\\"SolvBTCRouter: invalid governor\\\");\\n        require(openFundMarket_ != address(0), \\\"SolvBTCRouter: invalid openFundMarket\\\");\\n        require(solvBTCMultiAssetPool_ != address(0), \\\"SolvBTCRouter: invalid solvBTCMultiAssetPool\\\");\\n\\n        AdminControlUpgradeable.__AdminControl_init(msg.sender);\\n        GovernorControlUpgradeable.__GovernorControl_init(governor_);\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n        _setOpenFundMarket(openFundMarket_);\\n        _setSolvBTCMultiAssetPool(solvBTCMultiAssetPool_);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC3525Receiver).interfaceId || interfaceId == type(IERC721Receiver).interfaceId\\n            || interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    function onERC3525Received(\\n        address, /* operator_ */\\n        uint256 fromSftId_,\\n        uint256 toSftId_,\\n        uint256 value_,\\n        bytes calldata /* data_ */\\n    ) external virtual override returns (bytes4) {\\n        IERC3525 openFundShare = IERC3525(msg.sender);\\n        uint256 openFundShareSlot = openFundShare.slotOf(toSftId_);\\n\\n        require(\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).isSftSlotDepositAllowed(\\n                address(openFundShare), openFundShareSlot\\n            ),\\n            \\\"SolvBTCRouter: sft slot not allowed\\\"\\n        );\\n        require(value_ > 0, \\\"SolvBTCRouter: stake amount cannot be 0\\\");\\n\\n        address fromSftIdOwner = openFundShare.ownerOf(fromSftId_);\\n        if (\\n            fromSftIdOwner == openFundMarket || fromSftIdOwner == solvBTCMultiAssetPool\\n                || fromSftIdOwner == address(this)\\n        ) {\\n            return IERC3525Receiver.onERC3525Received.selector;\\n        }\\n\\n        address toSftIdOwner = openFundShare.ownerOf(toSftId_);\\n        require(toSftIdOwner == address(this), \\\"SolvBTCRouter: not owned sft id\\\");\\n\\n        {\\n            if (holdingSftIds[address(openFundShare)][openFundShareSlot] == 0) {\\n                holdingSftIds[address(openFundShare)][openFundShareSlot] = toSftId_;\\n            } else {\\n                require(\\n                    toSftId_ == holdingSftIds[address(openFundShare)][openFundShareSlot],\\n                    \\\"SolvBTCRouter: not holding sft id\\\"\\n                );\\n            }\\n\\n            uint256 newSftId = openFundShare.transferFrom(toSftId_, address(this), value_);\\n            openFundShare.approve(solvBTCMultiAssetPool, newSftId);\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).deposit(address(openFundShare), newSftId, value_);\\n        }\\n\\n        address solvBTC =\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).getERC20(address(openFundShare), openFundShareSlot);\\n        ERC20TransferHelper.doTransferOut(solvBTC, payable(fromSftIdOwner), value_);\\n\\n        emit Stake(solvBTC, fromSftIdOwner, address(openFundShare), openFundShareSlot, fromSftId_, value_);\\n        return IERC3525Receiver.onERC3525Received.selector;\\n    }\\n\\n    function onERC721Received(address, /* operator_ */ address from_, uint256 sftId_, bytes calldata /* data_ */ )\\n        external\\n        virtual\\n        override\\n        returns (bytes4)\\n    {\\n        IERC3525 openFundShare = IERC3525(msg.sender);\\n        uint256 openFundShareSlot = openFundShare.slotOf(sftId_);\\n\\n        require(\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).isSftSlotDepositAllowed(\\n                address(openFundShare), openFundShareSlot\\n            ),\\n            \\\"SolvBTCRouter: sft slot not allowed\\\"\\n        );\\n\\n        if (from_ == openFundMarket || from_ == solvBTCMultiAssetPool) {\\n            return IERC721Receiver.onERC721Received.selector;\\n        }\\n\\n        address sftIdOwner = openFundShare.ownerOf(sftId_);\\n        require(sftIdOwner == address(this), \\\"SolvBTCRouter: not owned sft id\\\");\\n\\n        uint256 openFundShareValue = openFundShare.balanceOf(sftId_);\\n        require(openFundShareValue > 0, \\\"SolvBTCRouter: stake amount cannot be 0\\\");\\n\\n        openFundShare.approve(solvBTCMultiAssetPool, sftId_);\\n        ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).deposit(address(openFundShare), sftId_, openFundShareValue);\\n\\n        address solvBTC =\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).getERC20(address(openFundShare), openFundShareSlot);\\n        ERC20TransferHelper.doTransferOut(solvBTC, payable(from_), openFundShareValue);\\n\\n        emit Stake(solvBTC, from_, address(openFundShare), openFundShareSlot, sftId_, openFundShareValue);\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function stake(address sftAddress_, uint256 sftId_, uint256 amount_) external virtual nonReentrant {\\n        IERC3525 openFundShare = IERC3525(sftAddress_);\\n        uint256 openFundShareSlot = openFundShare.slotOf(sftId_);\\n\\n        require(\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).isSftSlotDepositAllowed(\\n                address(openFundShare), openFundShareSlot\\n            ),\\n            \\\"SolvBTCRouter: sft slot not allowed\\\"\\n        );\\n\\n        require(msg.sender == openFundShare.ownerOf(sftId_), \\\"SolvBTCRouter: caller is not sft owner\\\");\\n        require(amount_ > 0, \\\"SolvBTCRouter: stake amount cannot be 0\\\");\\n\\n        uint256 sftBalance = openFundShare.balanceOf(sftId_);\\n        if (amount_ == sftBalance) {\\n            ERC3525TransferHelper.doSafeTransferIn(sftAddress_, msg.sender, sftId_);\\n        } else if (amount_ < sftBalance) {\\n            uint256 holdingSftId = holdingSftIds[sftAddress_][openFundShareSlot];\\n            if (holdingSftId == 0) {\\n                ERC3525TransferHelper.doTransferIn(sftAddress_, sftId_, amount_);\\n            } else {\\n                ERC3525TransferHelper.doTransfer(sftAddress_, sftId_, holdingSftId, amount_);\\n            }\\n        } else {\\n            revert(\\\"SolvBTCRouter: stake amount exceeds sft balance\\\");\\n        }\\n    }\\n\\n    function unstake(address solvBTCAddress_, uint256 amount_, address sft_, uint256 slot_, uint256 sftId_)\\n        external\\n        virtual\\n        nonReentrant\\n        returns (uint256 toSftId_)\\n    {\\n        require(\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).isSftSlotWithdrawAllowed(sft_, slot_),\\n            \\\"SolvBTCRouter: sft slot not allowed\\\"\\n        );\\n        require(\\n            solvBTCAddress_ == ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).getERC20(sft_, slot_),\\n            \\\"SolvBTCRouter: solvBTC address not matched\\\"\\n        );\\n        require(amount_ > 0, \\\"SolvBTCRouter: unstake amount cannot be 0\\\");\\n        ERC20TransferHelper.doTransferIn(solvBTCAddress_, msg.sender, amount_);\\n\\n        if (holdingSftIds[sft_][slot_] == 0) {\\n            holdingSftIds[sft_][slot_] = ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).withdraw(sft_, slot_, 0, amount_);\\n        } else {\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).withdraw(sft_, slot_, holdingSftIds[sft_][slot_], amount_);\\n        }\\n\\n        if (sftId_ == 0) {\\n            toSftId_ = ERC3525TransferHelper.doTransferOut(sft_, holdingSftIds[sft_][slot_], msg.sender, amount_);\\n        } else {\\n            require(slot_ == IERC3525(sft_).slotOf(sftId_), \\\"SolvBTCRouter: sftId slot not matched\\\");\\n            require(msg.sender == IERC3525(sft_).ownerOf(sftId_), \\\"SolvBTCRouter: not sft owner\\\");\\n            ERC3525TransferHelper.doTransfer(sft_, holdingSftIds[sft_][slot_], sftId_, amount_);\\n            toSftId_ = sftId_;\\n        }\\n\\n        emit Unstake(solvBTCAddress_, msg.sender, sft_, slot_, toSftId_, amount_);\\n    }\\n\\n    function createSubscription(bytes32 poolId_, uint256 currencyAmount_)\\n        external\\n        virtual\\n        nonReentrant\\n        returns (uint256 shareValue_)\\n    {\\n        require(checkPoolPermission(poolId_), \\\"SolvBTCRouter: pool permission denied\\\");\\n        PoolInfo memory poolInfo = IOpenFundMarket(openFundMarket).poolInfos(poolId_);\\n        IERC3525 openFundShare = IERC3525(poolInfo.poolSFTInfo.openFundShare);\\n        uint256 openFundShareSlot = poolInfo.poolSFTInfo.openFundShareSlot;\\n\\n        ERC20TransferHelper.doTransferIn(poolInfo.currency, msg.sender, currencyAmount_);\\n        ERC20TransferHelper.doApprove(poolInfo.currency, openFundMarket, currencyAmount_);\\n        shareValue_ =\\n            IOpenFundMarket(openFundMarket).subscribe(poolId_, currencyAmount_, 0, uint64(block.timestamp + 300));\\n\\n        uint256 shareCount = openFundShare.balanceOf(address(this));\\n        uint256 shareId = openFundShare.tokenOfOwnerByIndex(address(this), shareCount - 1);\\n        require(openFundShare.slotOf(shareId) == openFundShareSlot, \\\"SolvBTCRouter: incorrect share slot\\\");\\n        require(openFundShare.balanceOf(shareId) == shareValue_, \\\"SolvBTCRouter: incorrect share value\\\");\\n\\n        openFundShare.approve(solvBTCMultiAssetPool, shareId);\\n        ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).deposit(address(openFundShare), shareId, shareValue_);\\n\\n        address solvBTC =\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).getERC20(address(openFundShare), openFundShareSlot);\\n        ERC20TransferHelper.doTransferOut(solvBTC, payable(msg.sender), shareValue_);\\n\\n        emit CreateSubscription(poolId_, msg.sender, solvBTC, shareValue_, poolInfo.currency, currencyAmount_);\\n    }\\n\\n    function createRedemption(bytes32 poolId_, uint256 redeemAmount_)\\n        external\\n        virtual\\n        nonReentrant\\n        returns (uint256 redemptionId_)\\n    {\\n        PoolInfo memory poolInfo = IOpenFundMarket(openFundMarket).poolInfos(poolId_);\\n        IERC3525 openFundShare = IERC3525(poolInfo.poolSFTInfo.openFundShare);\\n        IERC3525 openFundRedemption = IERC3525(poolInfo.poolSFTInfo.openFundRedemption);\\n        uint256 openFundShareSlot = poolInfo.poolSFTInfo.openFundShareSlot;\\n\\n        require(\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).isSftSlotWithdrawAllowed(\\n                address(openFundShare), openFundShareSlot\\n            ),\\n            \\\"SolvBTCRouter: sft slot not allowed\\\"\\n        );\\n\\n        address solvBTC =\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).getERC20(address(openFundShare), openFundShareSlot);\\n        ERC20TransferHelper.doTransferIn(solvBTC, msg.sender, redeemAmount_);\\n        uint256 shareId = ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).withdraw(\\n            address(openFundShare), openFundShareSlot, 0, redeemAmount_\\n        );\\n\\n        ERC3525TransferHelper.doApproveId(address(openFundShare), openFundMarket, shareId);\\n        IOpenFundMarket(openFundMarket).requestRedeem(poolId_, shareId, 0, redeemAmount_);\\n\\n        uint256 redemptionBalance = openFundRedemption.balanceOf(address(this));\\n        redemptionId_ = openFundRedemption.tokenOfOwnerByIndex(address(this), redemptionBalance - 1);\\n        require(\\n            openFundRedemption.balanceOf(redemptionId_) == redeemAmount_, \\\"SolvBTCRouter: incorrect redemption value\\\"\\n        );\\n        ERC3525TransferHelper.doTransferOut(address(openFundRedemption), payable(msg.sender), redemptionId_);\\n\\n        emit CreateRedemption(poolId_, msg.sender, solvBTC, redeemAmount_, redemptionId_);\\n    }\\n\\n    function cancelRedemption(bytes32 poolId_, uint256 openFundRedemptionId_) external virtual nonReentrant {\\n        PoolInfo memory poolInfo = IOpenFundMarket(openFundMarket).poolInfos(poolId_);\\n        IERC3525 openFundShare = IERC3525(poolInfo.poolSFTInfo.openFundShare);\\n        IERC3525 openFundRedemption = IERC3525(poolInfo.poolSFTInfo.openFundRedemption);\\n        uint256 openFundShareSlot = poolInfo.poolSFTInfo.openFundShareSlot;\\n\\n        ERC3525TransferHelper.doTransferIn(address(openFundRedemption), msg.sender, openFundRedemptionId_);\\n        ERC3525TransferHelper.doApproveId(address(openFundRedemption), openFundMarket, openFundRedemptionId_);\\n        IOpenFundMarket(openFundMarket).revokeRedeem(poolId_, openFundRedemptionId_);\\n        uint256 shareBalance = openFundShare.balanceOf(address(this));\\n        uint256 shareId = openFundShare.tokenOfOwnerByIndex(address(this), shareBalance - 1);\\n        uint256 shareValue = openFundShare.balanceOf(shareId);\\n\\n        openFundShare.approve(solvBTCMultiAssetPool, shareId);\\n        ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).deposit(address(openFundShare), shareId, shareValue);\\n        address solvBTC =\\n            ISolvBTCMultiAssetPool(solvBTCMultiAssetPool).getERC20(address(openFundShare), openFundShareSlot);\\n\\n        ERC20TransferHelper.doTransferOut(solvBTC, payable(msg.sender), shareValue);\\n\\n        emit CancelRedemption(poolId_, msg.sender, solvBTC, openFundRedemptionId_, shareValue);\\n    }\\n\\n    function checkPoolPermission(bytes32 poolId_) public view virtual returns (bool) {\\n        PoolInfo memory poolInfo = IOpenFundMarket(openFundMarket).poolInfos(poolId_);\\n        if (poolInfo.permissionless) {\\n            return true;\\n        }\\n        address whiteListManager = IOpenFundMarket(openFundMarket).getAddress(\\\"OFMWhitelistStrategyManager\\\");\\n        return IOFMWhitelistStrategyManager(whiteListManager).isWhitelisted(poolId_, msg.sender);\\n    }\\n\\n    function setOpenFundMarket(address openFundMarket_) external virtual onlyAdmin {\\n        _setOpenFundMarket(openFundMarket_);\\n    }\\n\\n    function _setOpenFundMarket(address openFundMarket_) internal virtual {\\n        require(openFundMarket_ != address(0), \\\"SolvBTCRouter: invalid openFundMarket\\\");\\n        emit SetOpenFundMarket(openFundMarket, openFundMarket_);\\n        openFundMarket = openFundMarket_;\\n    }\\n\\n    function setSolvBTCMultiAssetPool(address solvBTCMultiAssetPool_) external virtual onlyAdmin {\\n        _setSolvBTCMultiAssetPool(solvBTCMultiAssetPool_);\\n    }\\n\\n    function _setSolvBTCMultiAssetPool(address solvBTCMultiAssetPool_) internal virtual {\\n        require(solvBTCMultiAssetPool_ != address(0), \\\"SolvBTCRouter: invalid solvBTCMultiAssetPool\\\");\\n        emit SetSolvBTCMultiAssetPool(solvBTCMultiAssetPool, solvBTCMultiAssetPool_);\\n        solvBTCMultiAssetPool = solvBTCMultiAssetPool_;\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xf32f33a65c9e3bbab54c7d069f9ddaeaeb7969d40210db620da2272f2035d2e3\",\"license\":\"MIT\"},\"contracts/access/AdminControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract AdminControlUpgradeable is Initializable {\\n\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingAdmin() {\\n        require(msg.sender == pendingAdmin, \\\"only pending admin\\\");\\n        _;\\n    }\\n\\n    function __AdminControl_init(address admin_) internal onlyInitializing {\\n        __AdminControl_init_unchained(admin_);\\n    }\\n\\n    function __AdminControl_init_unchained(address admin_) internal onlyInitializing {\\n        admin = admin_;\\n        emit NewAdmin(address(0), admin_);\\n    }\\n\\n    function transferAdmin(address newPendingAdmin_) external virtual onlyAdmin {\\n        emit NewPendingAdmin(pendingAdmin, newPendingAdmin_);\\n        pendingAdmin = newPendingAdmin_;        \\n    }\\n\\n    function acceptAdmin() external virtual onlyPendingAdmin {\\n        emit NewAdmin(admin, pendingAdmin);\\n        admin = pendingAdmin;\\n        delete pendingAdmin;\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bde55289afe561d40407007b005a6cdc97d7cc3ec98e58866faeb80f63f883\",\"license\":\"MIT\"},\"contracts/access/GovernorControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract GovernorControlUpgradeable is Initializable {\\n\\n\\tevent NewGovernor(address oldGovernor, address newGovernor);\\n\\tevent NewPendingGovernor(address oldPendingGovernor, address newPendingGovernor);\\n\\n\\taddress public governor;\\n\\taddress public pendingGovernor;\\n\\n\\tmodifier onlyGovernor() {\\n\\t\\trequire(governor == msg.sender, \\\"only governor\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyPendingGovernor() {\\n\\t\\trequire(pendingGovernor == msg.sender, \\\"only governor\\\");\\n\\t\\t_;\\n\\t}\\n\\n    function __GovernorControl_init(address governor_) internal onlyInitializing {\\n        __GovernorControl_init_unchained(governor_);\\n    }\\n\\n    function __GovernorControl_init_unchained(address governor_) internal onlyInitializing {\\n        governor = governor_;\\n        emit NewGovernor(address(0), governor_);\\n    }\\n\\n\\tfunction transferGovernance(address newPendingGovernor_) external virtual onlyGovernor {\\n\\t\\temit NewPendingGovernor(pendingGovernor, newPendingGovernor_);\\n\\t\\tpendingGovernor = newPendingGovernor_;\\n\\t}\\n\\n\\tfunction acceptGovernance() external virtual onlyPendingGovernor {\\n\\t\\temit NewGovernor(governor, pendingGovernor);\\n\\t\\tgovernor = pendingGovernor;\\n\\t\\tdelete pendingGovernor;\\n\\t}\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xb5ac2d7ee4cf554341129668f843eba7f389e793b0b56318261b9deffb4dcf0a\",\"license\":\"MIT\"},\"contracts/external/IERC3525.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IERC3525 is IERC721 {\\n    function valueDecimals() external view returns (uint8);\\n    function balanceOf(uint256 tokenId) external view returns (uint256);\\n    function slotOf(uint256 tokenId) external view returns (uint256);\\n    function allowance(uint256 tokenId, address operator) external view returns (uint256);\\n    \\n    function approve(address operator, uint256 tokenId) external payable;\\n    function approve(uint256 tokenId, address operator, uint256 value) external payable;\\n    function transferFrom(uint256 fromTokenId, uint256 toTokenId, uint256 value) external payable;\\n    function transferFrom(uint256 fromTokenId, address to, uint256 value) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a41cdc0d8776a3dacd22983247a662b8a982efa4a7e5c57466de2274fa3d4a7\",\"license\":\"MIT\"},\"contracts/external/IERC3525Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC3525Receiver {\\n    function onERC3525Received(address operator, uint256 fromTokenId, uint256 toTokenId, uint256 value, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x931b362b85b9bc3a3a6fbff54d2f631e3e7f021130717a31947f017ec42b1b08\",\"license\":\"MIT\"},\"contracts/external/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC721 {\\n    function balanceOf(address owner) external view returns (uint256);\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n    function getApproved(uint256 tokenId) external view returns (address);\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function approve(address approved, uint256 tokenId) external payable;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external payable;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x6bfe227558726b5692c09a72a1ad0068fa4fc28bac6cc176937d1e10eaf880c4\",\"license\":\"MIT\"},\"contracts/external/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x1e859773aaf8f8759146ea718f5a7c290b7b0fe9163137738586e1e9c1785923\",\"license\":\"MIT\"},\"contracts/external/IOpenFundMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nstruct SubscribeLimitInfo {\\n    uint256 hardCap;\\n    uint256 subscribeMin;\\n    uint256 subscribeMax;\\n    uint64 fundraisingStartTime;\\n    uint64 fundraisingEndTime;\\n}\\n\\nstruct PoolSFTInfo {\\n    address openFundShare;\\n    address openFundRedemption;\\n    uint256 openFundShareSlot;\\n    uint256 latestRedeemSlot;\\n}\\n\\nstruct PoolFeeInfo {\\n    uint16 carryRate;\\n    address carryCollector;\\n    uint64 latestProtocolFeeSettleTime;\\n}\\n\\nstruct ManagerInfo {\\n    address poolManager;\\n    address subscribeNavManager;\\n    address redeemNavManager;\\n}\\n\\nstruct PoolInfo {\\n    PoolSFTInfo poolSFTInfo;\\n    PoolFeeInfo poolFeeInfo;\\n    ManagerInfo managerInfo;\\n    SubscribeLimitInfo subscribeLimitInfo;\\n    address vault;\\n    address currency;\\n    address navOracle;\\n    uint64 valueDate;\\n    bool permissionless;\\n    uint256 fundraisingAmount;\\n}\\n\\ninterface IOpenFundMarket {\\n    function subscribe(bytes32 poolId, uint256 currencyAmount, uint256 openFundShareId, uint64 expireTime)\\n        external\\n        returns (uint256 value_);\\n    function requestRedeem(bytes32 poolId, uint256 openFundShareId, uint256 openFundRedemptionId, uint256 redeemValue)\\n        external;\\n    function revokeRedeem(bytes32 poolId, uint256 openFundRedemptionId) external;\\n\\n    function poolInfos(bytes32 poolId) external view returns (PoolInfo memory);\\n    function getAddress(bytes32 name) external view returns (address);\\n    function purchasedRecords(bytes32 poolId, address buyer) external view returns (uint256);\\n}\\n\\ninterface IOFMWhitelistStrategyManager {\\n    function isWhitelisted(bytes32 poolId_, address buyer_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x086d692b85541803d243e9b8ab6aecb91821274054bf536bc360b355bacc94ac\",\"license\":\"MIT\"},\"contracts/utils/ERC20TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface ERC20Interface {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary ERC20TransferHelper {\\n\\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    function doApprove(address underlying, address spender, uint256 amount) internal {\\n        require(underlying.code.length > 0, \\\"invalid underlying\\\");\\n        (bool success, bytes memory data) = underlying.call(\\n            abi.encodeWithSelector(\\n                ERC20Interface.approve.selector,\\n                spender,\\n                amount\\n            )\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SAF\\\");\\n    }\\n\\n    function doTransferIn(address underlying, address from, uint256 amount) internal {\\n        if (underlying == ETH_ADDRESS) {\\n            // Sanity checks\\n            require(tx.origin == from || msg.sender == from, \\\"sender mismatch\\\");\\n            require(msg.value >= amount, \\\"value mismatch\\\");\\n        } else {\\n            require(underlying.code.length > 0, \\\"invalid underlying\\\");\\n            (bool success, bytes memory data) = underlying.call(\\n                abi.encodeWithSelector(\\n                    ERC20Interface.transferFrom.selector,\\n                    from,\\n                    address(this),\\n                    amount\\n                )\\n            );\\n            require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"STF\\\");\\n        }\\n    }\\n\\n    function doTransferOut(address underlying, address payable to, uint256 amount) internal {\\n        if (underlying == ETH_ADDRESS) {\\n            (bool success, ) = to.call{value: amount}(new bytes(0));\\n            require(success, \\\"STE\\\");\\n        } else {\\n            require(underlying.code.length > 0, \\\"invalid underlying\\\");\\n            (bool success, bytes memory data) = underlying.call(\\n                abi.encodeWithSelector(\\n                    ERC20Interface.transfer.selector,\\n                    to,\\n                    amount\\n                )\\n            );\\n            require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad355871805100dae61fd0a58d926df8ee37db00237d339afde5269e79319fe2\",\"license\":\"MIT\"},\"contracts/utils/ERC3525TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface ERC721Interface {\\n    function approve(address to, uint256 tokenId) external;\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\\ninterface ERC3525Interface {\\n    function approve(uint256 tokenId, address to, uint256 allowance) external payable;\\n    function transferFrom(uint256 fromTokenId, uint256 toTokenId, uint256 value) external payable;\\n    function transferFrom(uint256 fromTokenId, address to, uint256 value) external payable returns (uint256); \\n}\\n\\nlibrary ERC3525TransferHelper {\\n    function doApproveId(address underlying, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.approve(to, tokenId);\\n    }\\n\\n    function doApproveValue(address underlying, uint256 tokenId, address to, uint256 allowance) internal {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        token.approve(tokenId, to, allowance);\\n    }\\n\\n    function doTransferIn(address underlying, address from, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.transferFrom(from, address(this), tokenId);\\n    }\\n    \\n    function doSafeTransferIn(address underlying, address from, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.safeTransferFrom(from, address(this), tokenId);\\n    }\\n\\n    function doSafeTransferOut(address underlying, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.safeTransferFrom(address(this), to, tokenId);\\n    }\\n\\n    function doTransferOut(address underlying, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.transferFrom(address(this), to, tokenId);\\n    }\\n\\n    function doTransferIn(address underlying, uint256 fromTokenId, uint256 value) internal returns (uint256 newTokenId) {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        return token.transferFrom(fromTokenId, address(this), value);\\n    }\\n\\n    function doTransferOut(address underlying, uint256 fromTokenId, address to, uint256 value) internal returns (uint256 newTokenId) {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        newTokenId = token.transferFrom(fromTokenId, to, value);\\n    }\\n\\n    function doTransfer(address underlying, address from, address to, uint256 tokenId) internal {\\n        ERC721Interface token = ERC721Interface(underlying);\\n        token.transferFrom(from, to, tokenId);\\n    }\\n\\n    function doTransfer(address underlying, uint256 fromTokenId, uint256 toTokenId, uint256 value) internal {\\n        ERC3525Interface token = ERC3525Interface(underlying);\\n        token.transferFrom(fromTokenId, toTokenId, value);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7ba67e1347eb1a423a055a27a53488eff24b3b59a6ba84a7e8d0cf36b7c05ec1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061077c806100206000396000f3fe60806040526004361061004a5760003560e01c80631de26e161461004f5780633517c60414610075578063b9937ccb146100ad578063c0c53b8b146100cd578063f887ea40146100ef575b600080fd5b61006261005d36600461066a565b61010f565b6040519081526020015b60405180910390f35b34801561008157600080fd5b50600054610095906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b3480156100b957600080fd5b50600154610095906001600160a01b031681565b3480156100d957600080fd5b506100ed6100e83660046106a8565b610372565b005b3480156100fb57600080fd5b50600254610095906001600160a01b031681565b6000610119610582565b8134146101605760405162461bcd60e51b815260206004820152601060248201526f1a5b98dbdc9c9958dd08185b5bdd5b9d60821b60448201526064015b60405180910390fd5b60005460405163b6b55f2560e01b8152600481018490526001600160a01b039091169063b6b55f259084906024016000604051808303818588803b1580156101a757600080fd5b505af11580156101bb573d6000803e3d6000fd5b505060005460025460405163095ea7b360e01b81526001600160a01b03928316955063095ea7b394506101f6935091169086906004016106eb565b6020604051808303816000875af1158015610215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102399190610704565b50600254604051636d724ead60e01b815260048101859052602481018490526001600160a01b0390911690636d724ead906044016020604051808303816000875af115801561028c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b0919061072d565b60015460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906102e390339085906004016106eb565b6020604051808303816000875af1158015610302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103269190610704565b506040805183815260208101839052339185917f6849bd31a1772b1b6992f1f328cce6888b435faff25d13805baee12a8a944bbe910160405180910390a361036c6105b8565b92915050565b600061037c6105c9565b805490915060ff600160401b82041615906001600160401b03166000811580156103a35750825b90506000826001600160401b031660011480156103bf5750303b155b9050811580156103cd575080155b156103eb5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561041457845460ff60401b1916600160401b1785555b61041c6105ed565b6001600160a01b0388166104665760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b2103bb930b82a37b5b2b760791b6044820152606401610157565b6001600160a01b0387166104ae5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c696420736f6c7642544360881b6044820152606401610157565b6001600160a01b0386166104f55760405162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b2103937baba32b960911b6044820152606401610157565b600080546001600160a01b03808b166001600160a01b031992831617909255600180548a84169083161790556002805492891692909116919091179055831561057857845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600061058c6105ff565b8054909150600119016105b257604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60006105c26105ff565b6001905550565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6105f5610623565b6105fd610648565b565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b61062b610650565b6105fd57604051631afcd79f60e31b815260040160405180910390fd5b6105b8610623565b600061065a6105c9565b54600160401b900460ff16919050565b6000806040838503121561067d57600080fd5b50508035926020909101359150565b80356001600160a01b03811681146106a357600080fd5b919050565b6000806000606084860312156106bd57600080fd5b6106c68461068c565b92506106d46020850161068c565b91506106e26040850161068c565b90509250925092565b6001600160a01b03929092168252602082015260400190565b60006020828403121561071657600080fd5b8151801515811461072657600080fd5b9392505050565b60006020828403121561073f57600080fd5b505191905056fea2646970667358221220c022ed24292d175f4aa8af6100908642de51bdaf959a5d0f828cafa60cbf87f864736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80631de26e161461004f5780633517c60414610075578063b9937ccb146100ad578063c0c53b8b146100cd578063f887ea40146100ef575b600080fd5b61006261005d36600461066a565b61010f565b6040519081526020015b60405180910390f35b34801561008157600080fd5b50600054610095906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b3480156100b957600080fd5b50600154610095906001600160a01b031681565b3480156100d957600080fd5b506100ed6100e83660046106a8565b610372565b005b3480156100fb57600080fd5b50600254610095906001600160a01b031681565b6000610119610582565b8134146101605760405162461bcd60e51b815260206004820152601060248201526f1a5b98dbdc9c9958dd08185b5bdd5b9d60821b60448201526064015b60405180910390fd5b60005460405163b6b55f2560e01b8152600481018490526001600160a01b039091169063b6b55f259084906024016000604051808303818588803b1580156101a757600080fd5b505af11580156101bb573d6000803e3d6000fd5b505060005460025460405163095ea7b360e01b81526001600160a01b03928316955063095ea7b394506101f6935091169086906004016106eb565b6020604051808303816000875af1158015610215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102399190610704565b50600254604051636d724ead60e01b815260048101859052602481018490526001600160a01b0390911690636d724ead906044016020604051808303816000875af115801561028c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b0919061072d565b60015460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906102e390339085906004016106eb565b6020604051808303816000875af1158015610302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103269190610704565b506040805183815260208101839052339185917f6849bd31a1772b1b6992f1f328cce6888b435faff25d13805baee12a8a944bbe910160405180910390a361036c6105b8565b92915050565b600061037c6105c9565b805490915060ff600160401b82041615906001600160401b03166000811580156103a35750825b90506000826001600160401b031660011480156103bf5750303b155b9050811580156103cd575080155b156103eb5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561041457845460ff60401b1916600160401b1785555b61041c6105ed565b6001600160a01b0388166104665760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b2103bb930b82a37b5b2b760791b6044820152606401610157565b6001600160a01b0387166104ae5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c696420736f6c7642544360881b6044820152606401610157565b6001600160a01b0386166104f55760405162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b2103937baba32b960911b6044820152606401610157565b600080546001600160a01b03808b166001600160a01b031992831617909255600180548a84169083161790556002805492891692909116919091179055831561057857845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600061058c6105ff565b8054909150600119016105b257604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b60006105c26105ff565b6001905550565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b6105f5610623565b6105fd610648565b565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0090565b61062b610650565b6105fd57604051631afcd79f60e31b815260040160405180910390fd5b6105b8610623565b600061065a6105c9565b54600160401b900460ff16919050565b6000806040838503121561067d57600080fd5b50508035926020909101359150565b80356001600160a01b03811681146106a357600080fd5b919050565b6000806000606084860312156106bd57600080fd5b6106c68461068c565b92506106d46020850161068c565b91506106e26040850161068c565b90509250925092565b6001600160a01b03929092168252602082015260400190565b60006020828403121561071657600080fd5b8151801515811461072657600080fd5b9392505050565b60006020828403121561073f57600080fd5b505191905056fea2646970667358221220c022ed24292d175f4aa8af6100908642de51bdaf959a5d0f828cafa60cbf87f864736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2310,
        "contract": "contracts/NativeDeposit.sol:NativeDeposit",
        "label": "wrapToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2312,
        "contract": "contracts/NativeDeposit.sol:NativeDeposit",
        "label": "solvBTC",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2314,
        "contract": "contracts/NativeDeposit.sol:NativeDeposit",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}